// JavaScript wrapper for vtkRenderedGraphRepresentation with embind 
//
// This file was auto-generated using :
/*
node /home/jmh/github/VTKCMake/build/library/VTK-prefix/src/VTK-build/bin/vtkWrapJavaScript.js \
 @/home/jmh/github/VTKCMake/build/library/VTK-prefix/src/VTK-build/CMakeFiles/vtkViewsInfovis.js/vtkViewsInfovis.js.Release.args \
 -o \
 /home/jmh/github/VTKCMake/build/library/VTK-prefix/src/VTK-build/CMakeFiles/vtkViewsInfovis.js/vtkRenderedGraphRepresentationEmbinding.cxx \
 /home/jmh/github/vtk/Views/Infovis/vtkRenderedGraphRepresentation.h
*/
#include "vtkEmbindSmartPointerTrait.h"
#include <emscripten.h>
#include <string>
#include "vtkVariant.h"
#include "vtkObjectBase.h"
#include "vtkIndent.h"
#include "vtkTextProperty.h"
#include "vtkGraphLayoutStrategy.h"
#include "vtkEdgeLayoutStrategy.h"
#include "vtkViewTheme.h"
#include "vtkScalarBarWidget.h"
#include "vtkRenderedGraphRepresentation.h"

template<> void emscripten::internal::raw_destructor<vtkRenderedGraphRepresentation>(vtkRenderedGraphRepresentation * ptr){ ptr->Delete(); }
EMSCRIPTEN_BINDINGS(vtkRenderedGraphRepresentation_class) {
  emscripten::class_<vtkRenderedGraphRepresentation, emscripten::base<vtkRenderedRepresentation>>("vtkRenderedGraphRepresentation")
    .smart_ptr<vtkSmartPointer<vtkRenderedGraphRepresentation>>("vtkSmartPointer<vtkRenderedGraphRepresentation>")
    .constructor(&vtk::MakeVTKSmartPtr<vtkRenderedGraphRepresentation>)
    .class_function("IsTypeOf", emscripten::optional_override([]( const std::string & arg_0) -> int {  return vtkRenderedGraphRepresentation::IsTypeOf( arg_0.c_str());}))
    .function("IsA", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> int {  return self.IsA( arg_0.c_str());}))
    .class_function("SafeDownCast", &vtkRenderedGraphRepresentation::SafeDownCast, emscripten::allow_raw_pointers())
    .function("NewInstance", &vtkRenderedGraphRepresentation::NewInstance, emscripten::allow_raw_pointers())
    .class_function("GetNumberOfGenerationsFromBaseType", emscripten::optional_override([]( const std::string & arg_0) -> int {  return vtkRenderedGraphRepresentation::GetNumberOfGenerationsFromBaseType( arg_0.c_str());}))
    .function("GetNumberOfGenerationsFromBase", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> int {  return self.GetNumberOfGenerationsFromBase( arg_0.c_str());}))
    .function("SetVertexLabelArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> void {  return self.SetVertexLabelArrayName( arg_0.c_str());}))
    .function("GetVertexLabelArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self) -> std::string {  return self.GetVertexLabelArrayName();}))
    .function("SetVertexLabelPriorityArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> void {  return self.SetVertexLabelPriorityArrayName( arg_0.c_str());}))
    .function("GetVertexLabelPriorityArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self) -> std::string {  return self.GetVertexLabelPriorityArrayName();}))
    .function("SetVertexLabelVisibility", &vtkRenderedGraphRepresentation::SetVertexLabelVisibility)
    .function("GetVertexLabelVisibility", &vtkRenderedGraphRepresentation::GetVertexLabelVisibility)
    .function("VertexLabelVisibilityOn", &vtkRenderedGraphRepresentation::VertexLabelVisibilityOn)
    .function("VertexLabelVisibilityOff", &vtkRenderedGraphRepresentation::VertexLabelVisibilityOff)
    .function("SetVertexLabelTextProperty", &vtkRenderedGraphRepresentation::SetVertexLabelTextProperty, emscripten::allow_raw_pointers())
    .function("GetVertexLabelTextProperty", &vtkRenderedGraphRepresentation::GetVertexLabelTextProperty, emscripten::allow_raw_pointers())
    .function("SetVertexHoverArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> void {  return self.SetVertexHoverArrayName( arg_0.c_str());}))
    .function("GetVertexHoverArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self) -> std::string {  return self.GetVertexHoverArrayName();}))
    .function("SetHideVertexLabelsOnInteraction", &vtkRenderedGraphRepresentation::SetHideVertexLabelsOnInteraction)
    .function("GetHideVertexLabelsOnInteraction", &vtkRenderedGraphRepresentation::GetHideVertexLabelsOnInteraction)
    .function("HideVertexLabelsOnInteractionOn", &vtkRenderedGraphRepresentation::HideVertexLabelsOnInteractionOn)
    .function("HideVertexLabelsOnInteractionOff", &vtkRenderedGraphRepresentation::HideVertexLabelsOnInteractionOff)
    .function("SetEdgeLabelArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> void {  return self.SetEdgeLabelArrayName( arg_0.c_str());}))
    .function("GetEdgeLabelArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self) -> std::string {  return self.GetEdgeLabelArrayName();}))
    .function("SetEdgeLabelPriorityArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> void {  return self.SetEdgeLabelPriorityArrayName( arg_0.c_str());}))
    .function("GetEdgeLabelPriorityArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self) -> std::string {  return self.GetEdgeLabelPriorityArrayName();}))
    .function("SetEdgeLabelVisibility", &vtkRenderedGraphRepresentation::SetEdgeLabelVisibility)
    .function("GetEdgeLabelVisibility", &vtkRenderedGraphRepresentation::GetEdgeLabelVisibility)
    .function("EdgeLabelVisibilityOn", &vtkRenderedGraphRepresentation::EdgeLabelVisibilityOn)
    .function("EdgeLabelVisibilityOff", &vtkRenderedGraphRepresentation::EdgeLabelVisibilityOff)
    .function("SetEdgeLabelTextProperty", &vtkRenderedGraphRepresentation::SetEdgeLabelTextProperty, emscripten::allow_raw_pointers())
    .function("GetEdgeLabelTextProperty", &vtkRenderedGraphRepresentation::GetEdgeLabelTextProperty, emscripten::allow_raw_pointers())
    .function("SetEdgeHoverArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> void {  return self.SetEdgeHoverArrayName( arg_0.c_str());}))
    .function("GetEdgeHoverArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self) -> std::string {  return self.GetEdgeHoverArrayName();}))
    .function("SetHideEdgeLabelsOnInteraction", &vtkRenderedGraphRepresentation::SetHideEdgeLabelsOnInteraction)
    .function("GetHideEdgeLabelsOnInteraction", &vtkRenderedGraphRepresentation::GetHideEdgeLabelsOnInteraction)
    .function("HideEdgeLabelsOnInteractionOn", &vtkRenderedGraphRepresentation::HideEdgeLabelsOnInteractionOn)
    .function("HideEdgeLabelsOnInteractionOff", &vtkRenderedGraphRepresentation::HideEdgeLabelsOnInteractionOff)
    .function("SetVertexIconArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> void {  return self.SetVertexIconArrayName( arg_0.c_str());}))
    .function("GetVertexIconArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self) -> std::string {  return self.GetVertexIconArrayName();}))
    .function("SetVertexIconPriorityArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> void {  return self.SetVertexIconPriorityArrayName( arg_0.c_str());}))
    .function("GetVertexIconPriorityArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self) -> std::string {  return self.GetVertexIconPriorityArrayName();}))
    .function("SetVertexIconVisibility", &vtkRenderedGraphRepresentation::SetVertexIconVisibility)
    .function("GetVertexIconVisibility", &vtkRenderedGraphRepresentation::GetVertexIconVisibility)
    .function("VertexIconVisibilityOn", &vtkRenderedGraphRepresentation::VertexIconVisibilityOn)
    .function("VertexIconVisibilityOff", &vtkRenderedGraphRepresentation::VertexIconVisibilityOff)
    .function("AddVertexIconType", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0, int arg_1) -> void {  return self.AddVertexIconType( arg_0.c_str(), arg_1);}))
    .function("ClearVertexIconTypes", &vtkRenderedGraphRepresentation::ClearVertexIconTypes)
    .function("SetUseVertexIconTypeMap", &vtkRenderedGraphRepresentation::SetUseVertexIconTypeMap)
    .function("GetUseVertexIconTypeMap", &vtkRenderedGraphRepresentation::GetUseVertexIconTypeMap)
    .function("UseVertexIconTypeMapOn", &vtkRenderedGraphRepresentation::UseVertexIconTypeMapOn)
    .function("UseVertexIconTypeMapOff", &vtkRenderedGraphRepresentation::UseVertexIconTypeMapOff)
    .function("SetVertexIconAlignment", &vtkRenderedGraphRepresentation::SetVertexIconAlignment)
    .function("GetVertexIconAlignment", &vtkRenderedGraphRepresentation::GetVertexIconAlignment)
    .function("SetVertexSelectedIcon", &vtkRenderedGraphRepresentation::SetVertexSelectedIcon)
    .function("GetVertexSelectedIcon", &vtkRenderedGraphRepresentation::GetVertexSelectedIcon)
    .function("SetVertexDefaultIcon", &vtkRenderedGraphRepresentation::SetVertexDefaultIcon)
    .function("GetVertexDefaultIcon", &vtkRenderedGraphRepresentation::GetVertexDefaultIcon)
    .function("SetVertexIconSelectionMode", &vtkRenderedGraphRepresentation::SetVertexIconSelectionMode)
    .function("GetVertexIconSelectionMode", &vtkRenderedGraphRepresentation::GetVertexIconSelectionMode)
    .function("SetVertexIconSelectionModeToSelectedIcon", &vtkRenderedGraphRepresentation::SetVertexIconSelectionModeToSelectedIcon)
    .function("SetVertexIconSelectionModeToSelectedOffset", &vtkRenderedGraphRepresentation::SetVertexIconSelectionModeToSelectedOffset)
    .function("SetVertexIconSelectionModeToAnnotationIcon", &vtkRenderedGraphRepresentation::SetVertexIconSelectionModeToAnnotationIcon)
    .function("SetVertexIconSelectionModeToIgnoreSelection", &vtkRenderedGraphRepresentation::SetVertexIconSelectionModeToIgnoreSelection)
    .function("SetEdgeIconArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> void {  return self.SetEdgeIconArrayName( arg_0.c_str());}))
    .function("GetEdgeIconArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self) -> std::string {  return self.GetEdgeIconArrayName();}))
    .function("SetEdgeIconPriorityArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> void {  return self.SetEdgeIconPriorityArrayName( arg_0.c_str());}))
    .function("GetEdgeIconPriorityArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self) -> std::string {  return self.GetEdgeIconPriorityArrayName();}))
    .function("SetEdgeIconVisibility", &vtkRenderedGraphRepresentation::SetEdgeIconVisibility)
    .function("GetEdgeIconVisibility", &vtkRenderedGraphRepresentation::GetEdgeIconVisibility)
    .function("EdgeIconVisibilityOn", &vtkRenderedGraphRepresentation::EdgeIconVisibilityOn)
    .function("EdgeIconVisibilityOff", &vtkRenderedGraphRepresentation::EdgeIconVisibilityOff)
    .function("AddEdgeIconType", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0, int arg_1) -> void {  return self.AddEdgeIconType( arg_0.c_str(), arg_1);}))
    .function("ClearEdgeIconTypes", &vtkRenderedGraphRepresentation::ClearEdgeIconTypes)
    .function("SetUseEdgeIconTypeMap", &vtkRenderedGraphRepresentation::SetUseEdgeIconTypeMap)
    .function("GetUseEdgeIconTypeMap", &vtkRenderedGraphRepresentation::GetUseEdgeIconTypeMap)
    .function("UseEdgeIconTypeMapOn", &vtkRenderedGraphRepresentation::UseEdgeIconTypeMapOn)
    .function("UseEdgeIconTypeMapOff", &vtkRenderedGraphRepresentation::UseEdgeIconTypeMapOff)
    .function("SetEdgeIconAlignment", &vtkRenderedGraphRepresentation::SetEdgeIconAlignment)
    .function("GetEdgeIconAlignment", &vtkRenderedGraphRepresentation::GetEdgeIconAlignment)
    .function("SetColorVerticesByArray", &vtkRenderedGraphRepresentation::SetColorVerticesByArray)
    .function("GetColorVerticesByArray", &vtkRenderedGraphRepresentation::GetColorVerticesByArray)
    .function("ColorVerticesByArrayOn", &vtkRenderedGraphRepresentation::ColorVerticesByArrayOn)
    .function("ColorVerticesByArrayOff", &vtkRenderedGraphRepresentation::ColorVerticesByArrayOff)
    .function("SetVertexColorArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> void {  return self.SetVertexColorArrayName( arg_0.c_str());}))
    .function("GetVertexColorArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self) -> std::string {  return self.GetVertexColorArrayName();}))
    .function("SetColorEdgesByArray", &vtkRenderedGraphRepresentation::SetColorEdgesByArray)
    .function("GetColorEdgesByArray", &vtkRenderedGraphRepresentation::GetColorEdgesByArray)
    .function("ColorEdgesByArrayOn", &vtkRenderedGraphRepresentation::ColorEdgesByArrayOn)
    .function("ColorEdgesByArrayOff", &vtkRenderedGraphRepresentation::ColorEdgesByArrayOff)
    .function("SetEdgeColorArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> void {  return self.SetEdgeColorArrayName( arg_0.c_str());}))
    .function("GetEdgeColorArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self) -> std::string {  return self.GetEdgeColorArrayName();}))
    .function("SetEnableVerticesByArray", &vtkRenderedGraphRepresentation::SetEnableVerticesByArray)
    .function("GetEnableVerticesByArray", &vtkRenderedGraphRepresentation::GetEnableVerticesByArray)
    .function("EnableVerticesByArrayOn", &vtkRenderedGraphRepresentation::EnableVerticesByArrayOn)
    .function("EnableVerticesByArrayOff", &vtkRenderedGraphRepresentation::EnableVerticesByArrayOff)
    .function("SetEnabledVerticesArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> void {  return self.SetEnabledVerticesArrayName( arg_0.c_str());}))
    .function("GetEnabledVerticesArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self) -> std::string {  return self.GetEnabledVerticesArrayName();}))
    .function("SetEnableEdgesByArray", &vtkRenderedGraphRepresentation::SetEnableEdgesByArray)
    .function("GetEnableEdgesByArray", &vtkRenderedGraphRepresentation::GetEnableEdgesByArray)
    .function("EnableEdgesByArrayOn", &vtkRenderedGraphRepresentation::EnableEdgesByArrayOn)
    .function("EnableEdgesByArrayOff", &vtkRenderedGraphRepresentation::EnableEdgesByArrayOff)
    .function("SetEnabledEdgesArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> void {  return self.SetEnabledEdgesArrayName( arg_0.c_str());}))
    .function("GetEnabledEdgesArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self) -> std::string {  return self.GetEnabledEdgesArrayName();}))
    .function("SetEdgeVisibility", &vtkRenderedGraphRepresentation::SetEdgeVisibility)
    .function("GetEdgeVisibility", &vtkRenderedGraphRepresentation::GetEdgeVisibility)
    .function("EdgeVisibilityOn", &vtkRenderedGraphRepresentation::EdgeVisibilityOn)
    .function("EdgeVisibilityOff", &vtkRenderedGraphRepresentation::EdgeVisibilityOff)
    .function("SetEdgeSelection", &vtkRenderedGraphRepresentation::SetEdgeSelection)
    .function("GetEdgeSelection", &vtkRenderedGraphRepresentation::GetEdgeSelection)
    .function("SetLayoutStrategy", emscripten::select_overload<void(vtkRenderedGraphRepresentation&, vtkGraphLayoutStrategy*)>([](vtkRenderedGraphRepresentation& self, vtkGraphLayoutStrategy* arg_0) -> void { return self.SetLayoutStrategy( arg_0); }), emscripten::allow_raw_pointers())
    .function("SetLayoutStrategy", emscripten::select_overload<void(vtkRenderedGraphRepresentation&, const std::string &)>([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> void { return self.SetLayoutStrategy( arg_0.c_str()); }))
    .function("GetLayoutStrategy", &vtkRenderedGraphRepresentation::GetLayoutStrategy, emscripten::allow_raw_pointers())
    .function("GetLayoutStrategyName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self) -> std::string {  return self.GetLayoutStrategyName();}))
    .function("SetLayoutStrategyToRandom", &vtkRenderedGraphRepresentation::SetLayoutStrategyToRandom)
    .function("SetLayoutStrategyToForceDirected", &vtkRenderedGraphRepresentation::SetLayoutStrategyToForceDirected)
    .function("SetLayoutStrategyToSimple2D", &vtkRenderedGraphRepresentation::SetLayoutStrategyToSimple2D)
    .function("SetLayoutStrategyToClustering2D", &vtkRenderedGraphRepresentation::SetLayoutStrategyToClustering2D)
    .function("SetLayoutStrategyToCommunity2D", &vtkRenderedGraphRepresentation::SetLayoutStrategyToCommunity2D)
    .function("SetLayoutStrategyToFast2D", &vtkRenderedGraphRepresentation::SetLayoutStrategyToFast2D)
    .function("SetLayoutStrategyToPassThrough", &vtkRenderedGraphRepresentation::SetLayoutStrategyToPassThrough)
    .function("SetLayoutStrategyToCircular", &vtkRenderedGraphRepresentation::SetLayoutStrategyToCircular)
    .function("SetLayoutStrategyToTree", emscripten::select_overload<void(vtkRenderedGraphRepresentation&)>([](vtkRenderedGraphRepresentation& self) -> void { return self.SetLayoutStrategyToTree(); }))
    .function("SetLayoutStrategyToTree", emscripten::select_overload<void(vtkRenderedGraphRepresentation&, bool, double, double, double)>([](vtkRenderedGraphRepresentation& self, bool arg_0, double arg_1, double arg_2, double arg_3) -> void { return self.SetLayoutStrategyToTree( arg_0, arg_1, arg_2, arg_3); }))
    .function("SetLayoutStrategyToCosmicTree", emscripten::select_overload<void(vtkRenderedGraphRepresentation&)>([](vtkRenderedGraphRepresentation& self) -> void { return self.SetLayoutStrategyToCosmicTree(); }))
    .function("SetLayoutStrategyToCosmicTree", emscripten::select_overload<void(vtkRenderedGraphRepresentation&, const std::string &, bool, int, int)>([](vtkRenderedGraphRepresentation& self, const std::string & arg_0, bool arg_1, int arg_2, int arg_3) -> void { return self.SetLayoutStrategyToCosmicTree( arg_0.c_str(), arg_1, arg_2, arg_3); }))
    .function("SetLayoutStrategyToCone", &vtkRenderedGraphRepresentation::SetLayoutStrategyToCone)
    .function("SetLayoutStrategyToSpanTree", &vtkRenderedGraphRepresentation::SetLayoutStrategyToSpanTree)
    .function("SetLayoutStrategyToAssignCoordinates", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0, const std::string & arg_1, const std::string & arg_2) -> void {  return self.SetLayoutStrategyToAssignCoordinates( arg_0.c_str(), arg_1.c_str(), arg_2.c_str());}))
    .function("SetEdgeLayoutStrategy", emscripten::select_overload<void(vtkRenderedGraphRepresentation&, vtkEdgeLayoutStrategy*)>([](vtkRenderedGraphRepresentation& self, vtkEdgeLayoutStrategy* arg_0) -> void { return self.SetEdgeLayoutStrategy( arg_0); }), emscripten::allow_raw_pointers())
    .function("SetEdgeLayoutStrategy", emscripten::select_overload<void(vtkRenderedGraphRepresentation&, const std::string &)>([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> void { return self.SetEdgeLayoutStrategy( arg_0.c_str()); }))
    .function("GetEdgeLayoutStrategy", &vtkRenderedGraphRepresentation::GetEdgeLayoutStrategy, emscripten::allow_raw_pointers())
    .function("SetEdgeLayoutStrategyToArcParallel", &vtkRenderedGraphRepresentation::SetEdgeLayoutStrategyToArcParallel)
    .function("SetEdgeLayoutStrategyToPassThrough", &vtkRenderedGraphRepresentation::SetEdgeLayoutStrategyToPassThrough)
    .function("SetEdgeLayoutStrategyToGeo", &vtkRenderedGraphRepresentation::SetEdgeLayoutStrategyToGeo)
    .function("GetEdgeLayoutStrategyName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self) -> std::string {  return self.GetEdgeLayoutStrategyName();}))
    .function("ApplyViewTheme", &vtkRenderedGraphRepresentation::ApplyViewTheme, emscripten::allow_raw_pointers())
    .function("SetGlyphType", &vtkRenderedGraphRepresentation::SetGlyphType)
    .function("GetGlyphType", &vtkRenderedGraphRepresentation::GetGlyphType)
    .function("SetScaling", &vtkRenderedGraphRepresentation::SetScaling)
    .function("GetScaling", &vtkRenderedGraphRepresentation::GetScaling)
    .function("ScalingOn", &vtkRenderedGraphRepresentation::ScalingOn)
    .function("ScalingOff", &vtkRenderedGraphRepresentation::ScalingOff)
    .function("SetScalingArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self, const std::string & arg_0) -> void {  return self.SetScalingArrayName( arg_0.c_str());}))
    .function("GetScalingArrayName", emscripten::optional_override([](vtkRenderedGraphRepresentation& self) -> std::string {  return self.GetScalingArrayName();}))
    .function("SetVertexScalarBarVisibility", &vtkRenderedGraphRepresentation::SetVertexScalarBarVisibility)
    .function("GetVertexScalarBarVisibility", &vtkRenderedGraphRepresentation::GetVertexScalarBarVisibility)
    .function("SetEdgeScalarBarVisibility", &vtkRenderedGraphRepresentation::SetEdgeScalarBarVisibility)
    .function("GetEdgeScalarBarVisibility", &vtkRenderedGraphRepresentation::GetEdgeScalarBarVisibility)
    .function("GetVertexScalarBar", &vtkRenderedGraphRepresentation::GetVertexScalarBar, emscripten::allow_raw_pointers())
    .function("GetEdgeScalarBar", &vtkRenderedGraphRepresentation::GetEdgeScalarBar, emscripten::allow_raw_pointers())
    .function("IsLayoutComplete", &vtkRenderedGraphRepresentation::IsLayoutComplete)
    .function("UpdateLayout", &vtkRenderedGraphRepresentation::UpdateLayout);
}
