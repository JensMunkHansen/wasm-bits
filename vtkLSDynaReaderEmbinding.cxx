// JavaScript wrapper for vtkLSDynaReader with embind 
//
// This file was auto-generated using :
/*
node /home/jmh/github/VTKCMake/build/library/VTK-prefix/src/VTK-build/bin/vtkWrapJavaScript.js \
 @/home/jmh/github/VTKCMake/build/library/VTK-prefix/src/VTK-build/CMakeFiles/vtkIOLSDyna.js/vtkIOLSDyna.js.Release.args \
 -o \
 /home/jmh/github/VTKCMake/build/library/VTK-prefix/src/VTK-build/CMakeFiles/vtkIOLSDyna.js/vtkLSDynaReaderEmbinding.cxx \
 /home/jmh/github/vtk/IO/LSDyna/vtkLSDynaReader.h
*/
#include "vtkEmbindSmartPointerTrait.h"
#include <emscripten.h>
#include <string>
#include "vtkVariant.h"
#include "vtkObjectBase.h"
#include "vtkIndent.h"
#include "vtkLSDynaReader.h"

template<> void emscripten::internal::raw_destructor<vtkLSDynaReader>(vtkLSDynaReader * ptr){ ptr->Delete(); }
EMSCRIPTEN_BINDINGS(vtkLSDynaReader_class) {
  emscripten::class_<vtkLSDynaReader, emscripten::base<vtkMultiBlockDataSetAlgorithm>>("vtkLSDynaReader")
    .smart_ptr<vtkSmartPointer<vtkLSDynaReader>>("vtkSmartPointer<vtkLSDynaReader>")
    .constructor(&vtk::MakeAvtkSmartPointer<vtkLSDynaReader>)
    .class_function("IsTypeOf", emscripten::optional_override([]( const std::string & arg_0) -> int {  return vtkLSDynaReader::IsTypeOf( arg_0.c_str());}))
    .function("IsA", emscripten::optional_override([](vtkLSDynaReader& self, const std::string & arg_0) -> int {  return self.IsA( arg_0.c_str());}))
    .class_function("SafeDownCast", &vtkLSDynaReader::SafeDownCast, emscripten::allow_raw_pointers())
    .function("NewInstance", &vtkLSDynaReader::NewInstance, emscripten::allow_raw_pointers())
    .class_function("GetNumberOfGenerationsFromBaseType", emscripten::optional_override([]( const std::string & arg_0) -> int {  return vtkLSDynaReader::GetNumberOfGenerationsFromBaseType( arg_0.c_str());}))
    .function("GetNumberOfGenerationsFromBase", emscripten::optional_override([](vtkLSDynaReader& self, const std::string & arg_0) -> int {  return self.GetNumberOfGenerationsFromBase( arg_0.c_str());}))
    .function("DebugDump", &vtkLSDynaReader::DebugDump)
    .function("CanReadFile", emscripten::optional_override([](vtkLSDynaReader& self, const std::string & arg_0) -> int {  return self.CanReadFile( arg_0.c_str());}))
    .function("SetDatabaseDirectory", emscripten::select_overload<void(vtkLSDynaReader&, const std::string&)>([](vtkLSDynaReader& self, const std::string& arg_0) -> void { return self.SetDatabaseDirectory( arg_0); }))
    .function("SetDatabaseDirectory", emscripten::select_overload<void(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> void { return self.SetDatabaseDirectory( arg_0.c_str()); }))
    .function("GetDatabaseDirectory", &vtkLSDynaReader::GetDatabaseDirectory)
    .function("IsDatabaseValid", &vtkLSDynaReader::IsDatabaseValid)
    .function("SetFileName", emscripten::select_overload<void(vtkLSDynaReader&, const std::string&)>([](vtkLSDynaReader& self, const std::string& arg_0) -> void { return self.SetFileName( arg_0); }))
    .function("SetFileName", emscripten::select_overload<void(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> void { return self.SetFileName( arg_0.c_str()); }))
    .function("GetFileName", &vtkLSDynaReader::GetFileName)
    .function("GetTitle", emscripten::optional_override([](vtkLSDynaReader& self) -> std::string {  return self.GetTitle();}))
    .function("GetDimensionality", &vtkLSDynaReader::GetDimensionality)
    .function("GetNumberOfNodes", &vtkLSDynaReader::GetNumberOfNodes)
    .function("GetNumberOfCells", &vtkLSDynaReader::GetNumberOfCells)
    .function("GetNumberOfContinuumCells", &vtkLSDynaReader::GetNumberOfContinuumCells)
    .function("GetNumberOfSolidCells", &vtkLSDynaReader::GetNumberOfSolidCells)
    .function("GetNumberOfThickShellCells", &vtkLSDynaReader::GetNumberOfThickShellCells)
    .function("GetNumberOfShellCells", &vtkLSDynaReader::GetNumberOfShellCells)
    .function("GetNumberOfRigidBodyCells", &vtkLSDynaReader::GetNumberOfRigidBodyCells)
    .function("GetNumberOfRoadSurfaceCells", &vtkLSDynaReader::GetNumberOfRoadSurfaceCells)
    .function("GetNumberOfBeamCells", &vtkLSDynaReader::GetNumberOfBeamCells)
    .function("GetNumberOfParticleCells", &vtkLSDynaReader::GetNumberOfParticleCells)
    .function("GetNumberOfTimeSteps", &vtkLSDynaReader::GetNumberOfTimeSteps)
    .function("SetTimeStep", &vtkLSDynaReader::SetTimeStep)
    .function("GetTimeStep", &vtkLSDynaReader::GetTimeStep)
    .function("GetTimeValue", &vtkLSDynaReader::GetTimeValue)
    .function("SetTimeStepRange", emscripten::select_overload<void(vtkLSDynaReader&, int, int)>([](vtkLSDynaReader& self, int arg_0, int arg_1) -> void { return self.SetTimeStepRange( arg_0, arg_1); }))
    .function("GetNumberOfPointArrays", &vtkLSDynaReader::GetNumberOfPointArrays)
    .function("GetPointArrayName", emscripten::optional_override([](vtkLSDynaReader& self, int arg_0) -> std::string {  return self.GetPointArrayName( arg_0);}))
    .function("SetPointArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, int, int)>([](vtkLSDynaReader& self, int arg_0, int arg_1) -> void { return self.SetPointArrayStatus( arg_0, arg_1); }))
    .function("SetPointArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, const std::string &, int)>([](vtkLSDynaReader& self, const std::string & arg_0, int arg_1) -> void { return self.SetPointArrayStatus( arg_0.c_str(), arg_1); }))
    .function("GetPointArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, int)>([](vtkLSDynaReader& self, int arg_0) -> int { return self.GetPointArrayStatus( arg_0); }))
    .function("GetPointArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> int { return self.GetPointArrayStatus( arg_0.c_str()); }))
    .function("GetNumberOfComponentsInPointArray", emscripten::select_overload<int(vtkLSDynaReader&, int)>([](vtkLSDynaReader& self, int arg_0) -> int { return self.GetNumberOfComponentsInPointArray( arg_0); }))
    .function("GetNumberOfComponentsInPointArray", emscripten::select_overload<int(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> int { return self.GetNumberOfComponentsInPointArray( arg_0.c_str()); }))
    .function("GetNumberOfCellArrays", &vtkLSDynaReader::GetNumberOfCellArrays)
    .function("GetCellArrayName", emscripten::optional_override([](vtkLSDynaReader& self, int arg_0, int arg_1) -> std::string {  return self.GetCellArrayName( arg_0, arg_1);}))
    .function("SetCellArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, int, int, int)>([](vtkLSDynaReader& self, int arg_0, int arg_1, int arg_2) -> void { return self.SetCellArrayStatus( arg_0, arg_1, arg_2); }))
    .function("SetCellArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, int, const std::string &, int)>([](vtkLSDynaReader& self, int arg_0, const std::string & arg_1, int arg_2) -> void { return self.SetCellArrayStatus( arg_0, arg_1.c_str(), arg_2); }))
    .function("GetCellArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, int, int)>([](vtkLSDynaReader& self, int arg_0, int arg_1) -> int { return self.GetCellArrayStatus( arg_0, arg_1); }))
    .function("GetCellArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, int, const std::string &)>([](vtkLSDynaReader& self, int arg_0, const std::string & arg_1) -> int { return self.GetCellArrayStatus( arg_0, arg_1.c_str()); }))
    .function("GetNumberOfComponentsInCellArray", emscripten::select_overload<int(vtkLSDynaReader&, int, int)>([](vtkLSDynaReader& self, int arg_0, int arg_1) -> int { return self.GetNumberOfComponentsInCellArray( arg_0, arg_1); }))
    .function("GetNumberOfComponentsInCellArray", emscripten::select_overload<int(vtkLSDynaReader&, int, const std::string &)>([](vtkLSDynaReader& self, int arg_0, const std::string & arg_1) -> int { return self.GetNumberOfComponentsInCellArray( arg_0, arg_1.c_str()); }))
    .function("GetNumberOfSolidArrays", &vtkLSDynaReader::GetNumberOfSolidArrays)
    .function("GetSolidArrayName", emscripten::optional_override([](vtkLSDynaReader& self, int arg_0) -> std::string {  return self.GetSolidArrayName( arg_0);}))
    .function("SetSolidArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, int, int)>([](vtkLSDynaReader& self, int arg_0, int arg_1) -> void { return self.SetSolidArrayStatus( arg_0, arg_1); }))
    .function("SetSolidArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, const std::string &, int)>([](vtkLSDynaReader& self, const std::string & arg_0, int arg_1) -> void { return self.SetSolidArrayStatus( arg_0.c_str(), arg_1); }))
    .function("GetSolidArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, int)>([](vtkLSDynaReader& self, int arg_0) -> int { return self.GetSolidArrayStatus( arg_0); }))
    .function("GetSolidArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> int { return self.GetSolidArrayStatus( arg_0.c_str()); }))
    .function("GetNumberOfComponentsInSolidArray", emscripten::select_overload<int(vtkLSDynaReader&, int)>([](vtkLSDynaReader& self, int arg_0) -> int { return self.GetNumberOfComponentsInSolidArray( arg_0); }))
    .function("GetNumberOfComponentsInSolidArray", emscripten::select_overload<int(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> int { return self.GetNumberOfComponentsInSolidArray( arg_0.c_str()); }))
    .function("GetNumberOfThickShellArrays", &vtkLSDynaReader::GetNumberOfThickShellArrays)
    .function("GetThickShellArrayName", emscripten::optional_override([](vtkLSDynaReader& self, int arg_0) -> std::string {  return self.GetThickShellArrayName( arg_0);}))
    .function("SetThickShellArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, int, int)>([](vtkLSDynaReader& self, int arg_0, int arg_1) -> void { return self.SetThickShellArrayStatus( arg_0, arg_1); }))
    .function("SetThickShellArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, const std::string &, int)>([](vtkLSDynaReader& self, const std::string & arg_0, int arg_1) -> void { return self.SetThickShellArrayStatus( arg_0.c_str(), arg_1); }))
    .function("GetThickShellArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, int)>([](vtkLSDynaReader& self, int arg_0) -> int { return self.GetThickShellArrayStatus( arg_0); }))
    .function("GetThickShellArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> int { return self.GetThickShellArrayStatus( arg_0.c_str()); }))
    .function("GetNumberOfComponentsInThickShellArray", emscripten::select_overload<int(vtkLSDynaReader&, int)>([](vtkLSDynaReader& self, int arg_0) -> int { return self.GetNumberOfComponentsInThickShellArray( arg_0); }))
    .function("GetNumberOfComponentsInThickShellArray", emscripten::select_overload<int(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> int { return self.GetNumberOfComponentsInThickShellArray( arg_0.c_str()); }))
    .function("GetNumberOfShellArrays", &vtkLSDynaReader::GetNumberOfShellArrays)
    .function("GetShellArrayName", emscripten::optional_override([](vtkLSDynaReader& self, int arg_0) -> std::string {  return self.GetShellArrayName( arg_0);}))
    .function("SetShellArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, int, int)>([](vtkLSDynaReader& self, int arg_0, int arg_1) -> void { return self.SetShellArrayStatus( arg_0, arg_1); }))
    .function("SetShellArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, const std::string &, int)>([](vtkLSDynaReader& self, const std::string & arg_0, int arg_1) -> void { return self.SetShellArrayStatus( arg_0.c_str(), arg_1); }))
    .function("GetShellArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, int)>([](vtkLSDynaReader& self, int arg_0) -> int { return self.GetShellArrayStatus( arg_0); }))
    .function("GetShellArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> int { return self.GetShellArrayStatus( arg_0.c_str()); }))
    .function("GetNumberOfComponentsInShellArray", emscripten::select_overload<int(vtkLSDynaReader&, int)>([](vtkLSDynaReader& self, int arg_0) -> int { return self.GetNumberOfComponentsInShellArray( arg_0); }))
    .function("GetNumberOfComponentsInShellArray", emscripten::select_overload<int(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> int { return self.GetNumberOfComponentsInShellArray( arg_0.c_str()); }))
    .function("GetNumberOfRigidBodyArrays", &vtkLSDynaReader::GetNumberOfRigidBodyArrays)
    .function("GetRigidBodyArrayName", emscripten::optional_override([](vtkLSDynaReader& self, int arg_0) -> std::string {  return self.GetRigidBodyArrayName( arg_0);}))
    .function("SetRigidBodyArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, int, int)>([](vtkLSDynaReader& self, int arg_0, int arg_1) -> void { return self.SetRigidBodyArrayStatus( arg_0, arg_1); }))
    .function("SetRigidBodyArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, const std::string &, int)>([](vtkLSDynaReader& self, const std::string & arg_0, int arg_1) -> void { return self.SetRigidBodyArrayStatus( arg_0.c_str(), arg_1); }))
    .function("GetRigidBodyArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, int)>([](vtkLSDynaReader& self, int arg_0) -> int { return self.GetRigidBodyArrayStatus( arg_0); }))
    .function("GetRigidBodyArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> int { return self.GetRigidBodyArrayStatus( arg_0.c_str()); }))
    .function("GetNumberOfComponentsInRigidBodyArray", emscripten::select_overload<int(vtkLSDynaReader&, int)>([](vtkLSDynaReader& self, int arg_0) -> int { return self.GetNumberOfComponentsInRigidBodyArray( arg_0); }))
    .function("GetNumberOfComponentsInRigidBodyArray", emscripten::select_overload<int(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> int { return self.GetNumberOfComponentsInRigidBodyArray( arg_0.c_str()); }))
    .function("GetNumberOfRoadSurfaceArrays", &vtkLSDynaReader::GetNumberOfRoadSurfaceArrays)
    .function("GetRoadSurfaceArrayName", emscripten::optional_override([](vtkLSDynaReader& self, int arg_0) -> std::string {  return self.GetRoadSurfaceArrayName( arg_0);}))
    .function("SetRoadSurfaceArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, int, int)>([](vtkLSDynaReader& self, int arg_0, int arg_1) -> void { return self.SetRoadSurfaceArrayStatus( arg_0, arg_1); }))
    .function("SetRoadSurfaceArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, const std::string &, int)>([](vtkLSDynaReader& self, const std::string & arg_0, int arg_1) -> void { return self.SetRoadSurfaceArrayStatus( arg_0.c_str(), arg_1); }))
    .function("GetRoadSurfaceArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, int)>([](vtkLSDynaReader& self, int arg_0) -> int { return self.GetRoadSurfaceArrayStatus( arg_0); }))
    .function("GetRoadSurfaceArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> int { return self.GetRoadSurfaceArrayStatus( arg_0.c_str()); }))
    .function("GetNumberOfComponentsInRoadSurfaceArray", emscripten::select_overload<int(vtkLSDynaReader&, int)>([](vtkLSDynaReader& self, int arg_0) -> int { return self.GetNumberOfComponentsInRoadSurfaceArray( arg_0); }))
    .function("GetNumberOfComponentsInRoadSurfaceArray", emscripten::select_overload<int(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> int { return self.GetNumberOfComponentsInRoadSurfaceArray( arg_0.c_str()); }))
    .function("GetNumberOfBeamArrays", &vtkLSDynaReader::GetNumberOfBeamArrays)
    .function("GetBeamArrayName", emscripten::optional_override([](vtkLSDynaReader& self, int arg_0) -> std::string {  return self.GetBeamArrayName( arg_0);}))
    .function("SetBeamArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, int, int)>([](vtkLSDynaReader& self, int arg_0, int arg_1) -> void { return self.SetBeamArrayStatus( arg_0, arg_1); }))
    .function("SetBeamArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, const std::string &, int)>([](vtkLSDynaReader& self, const std::string & arg_0, int arg_1) -> void { return self.SetBeamArrayStatus( arg_0.c_str(), arg_1); }))
    .function("GetBeamArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, int)>([](vtkLSDynaReader& self, int arg_0) -> int { return self.GetBeamArrayStatus( arg_0); }))
    .function("GetBeamArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> int { return self.GetBeamArrayStatus( arg_0.c_str()); }))
    .function("GetNumberOfComponentsInBeamArray", emscripten::select_overload<int(vtkLSDynaReader&, int)>([](vtkLSDynaReader& self, int arg_0) -> int { return self.GetNumberOfComponentsInBeamArray( arg_0); }))
    .function("GetNumberOfComponentsInBeamArray", emscripten::select_overload<int(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> int { return self.GetNumberOfComponentsInBeamArray( arg_0.c_str()); }))
    .function("GetNumberOfParticleArrays", &vtkLSDynaReader::GetNumberOfParticleArrays)
    .function("GetParticleArrayName", emscripten::optional_override([](vtkLSDynaReader& self, int arg_0) -> std::string {  return self.GetParticleArrayName( arg_0);}))
    .function("SetParticleArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, int, int)>([](vtkLSDynaReader& self, int arg_0, int arg_1) -> void { return self.SetParticleArrayStatus( arg_0, arg_1); }))
    .function("SetParticleArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, const std::string &, int)>([](vtkLSDynaReader& self, const std::string & arg_0, int arg_1) -> void { return self.SetParticleArrayStatus( arg_0.c_str(), arg_1); }))
    .function("GetParticleArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, int)>([](vtkLSDynaReader& self, int arg_0) -> int { return self.GetParticleArrayStatus( arg_0); }))
    .function("GetParticleArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> int { return self.GetParticleArrayStatus( arg_0.c_str()); }))
    .function("GetNumberOfComponentsInParticleArray", emscripten::select_overload<int(vtkLSDynaReader&, int)>([](vtkLSDynaReader& self, int arg_0) -> int { return self.GetNumberOfComponentsInParticleArray( arg_0); }))
    .function("GetNumberOfComponentsInParticleArray", emscripten::select_overload<int(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> int { return self.GetNumberOfComponentsInParticleArray( arg_0.c_str()); }))
    .function("SetDeformedMesh", &vtkLSDynaReader::SetDeformedMesh)
    .function("GetDeformedMesh", &vtkLSDynaReader::GetDeformedMesh)
    .function("DeformedMeshOn", &vtkLSDynaReader::DeformedMeshOn)
    .function("DeformedMeshOff", &vtkLSDynaReader::DeformedMeshOff)
    .function("SetRemoveDeletedCells", &vtkLSDynaReader::SetRemoveDeletedCells)
    .function("GetRemoveDeletedCells", &vtkLSDynaReader::GetRemoveDeletedCells)
    .function("RemoveDeletedCellsOn", &vtkLSDynaReader::RemoveDeletedCellsOn)
    .function("RemoveDeletedCellsOff", &vtkLSDynaReader::RemoveDeletedCellsOff)
    .function("SetDeletedCellsAsGhostArray", &vtkLSDynaReader::SetDeletedCellsAsGhostArray)
    .function("GetDeletedCellsAsGhostArray", &vtkLSDynaReader::GetDeletedCellsAsGhostArray)
    .function("DeletedCellsAsGhostArrayOn", &vtkLSDynaReader::DeletedCellsAsGhostArrayOn)
    .function("DeletedCellsAsGhostArrayOff", &vtkLSDynaReader::DeletedCellsAsGhostArrayOff)
    .function("SetInputDeck", emscripten::optional_override([](vtkLSDynaReader& self, const std::string & arg_0) -> void {  return self.SetInputDeck( arg_0.c_str());}))
    .function("GetInputDeck", emscripten::optional_override([](vtkLSDynaReader& self) -> std::string {  return self.GetInputDeck();}))
    .function("GetNumberOfPartArrays", &vtkLSDynaReader::GetNumberOfPartArrays)
    .function("GetPartArrayName", emscripten::optional_override([](vtkLSDynaReader& self, int arg_0) -> std::string {  return self.GetPartArrayName( arg_0);}))
    .function("SetPartArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, int, int)>([](vtkLSDynaReader& self, int arg_0, int arg_1) -> void { return self.SetPartArrayStatus( arg_0, arg_1); }))
    .function("SetPartArrayStatus", emscripten::select_overload<void(vtkLSDynaReader&, const std::string &, int)>([](vtkLSDynaReader& self, const std::string & arg_0, int arg_1) -> void { return self.SetPartArrayStatus( arg_0.c_str(), arg_1); }))
    .function("GetPartArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, int)>([](vtkLSDynaReader& self, int arg_0) -> int { return self.GetPartArrayStatus( arg_0); }))
    .function("GetPartArrayStatus", emscripten::select_overload<int(vtkLSDynaReader&, const std::string &)>([](vtkLSDynaReader& self, const std::string & arg_0) -> int { return self.GetPartArrayStatus( arg_0.c_str()); }));
}
