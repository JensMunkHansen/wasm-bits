// JavaScript wrapper for vtkProperty with embind 
//
// This file was auto-generated using :
/*
node /home/jmh/github/VTKCMake/build/library/VTK-prefix/src/VTK-build/bin/vtkWrapJavaScript.js \
 @/home/jmh/github/VTKCMake/build/library/VTK-prefix/src/VTK-build/CMakeFiles/vtkRenderingCore.js/vtkRenderingCore.js.Release.args \
 -o \
 /home/jmh/github/VTKCMake/build/library/VTK-prefix/src/VTK-build/CMakeFiles/vtkRenderingCore.js/vtkPropertyEmbinding.cxx \
 /home/jmh/github/vtk/Rendering/Core/vtkProperty.h
*/
#include "vtkEmbindSmartPointerTraits.h"
#include <emscripten.h>
#include <string>
#include "vtkVariant.h"
#include "vtkObjectBase.h"
#include "vtkIndent.h"
#include "vtkActor.h"
#include "vtkRenderer.h"
#include "vtkTexture.h"
#include "vtkWindow.h"
#include "vtkInformation.h"
#include "vtkProperty.h"

EMSCRIPTEN_BINDINGS(vtkRenderingCore_vtkProperty_0_1_constants) {
  const struct { const char *name; int value; }
    constants[7] = {
      { "VTK_FLAT", 0 },
      { "VTK_GOURAUD", 1 },
      { "VTK_PHONG", 2 },
      { "VTK_PBR", 3 },
      { "VTK_POINTS", 0 },
      { "VTK_WIREFRAME", 1 },
      { "VTK_SURFACE", 2 },
  };
  for (int c = 0; c < 7; c++)
  {
    emscripten::constant(constants[c].name, constants[c].value);
  }
}
template<> void emscripten::internal::raw_destructor<vtkProperty>(vtkProperty * ptr){ ptr->Delete(); }
EMSCRIPTEN_BINDINGS(vtkProperty_class) {
  emscripten::class_<vtkProperty, emscripten::base<vtkObject>>("vtkProperty")
    .smart_ptr<vtkSmartPointer<vtkProperty>>("vtkSmartPointer<vtkProperty>")
    .constructor(&vtk::MakeVTKSmartPtr<vtkProperty>)
    .class_function("IsTypeOf", emscripten::optional_override([]( const std::string & arg_0) -> int {  return vtkProperty::IsTypeOf( arg_0.c_str());}))
    .function("IsA", emscripten::optional_override([](vtkProperty& self, const std::string & arg_0) -> int {  return self.IsA( arg_0.c_str());}))
    .class_function("SafeDownCast", &vtkProperty::SafeDownCast, emscripten::allow_raw_pointers())
    .function("NewInstance", &vtkProperty::NewInstance, emscripten::allow_raw_pointers())
    .class_function("GetNumberOfGenerationsFromBaseType", emscripten::optional_override([]( const std::string & arg_0) -> int {  return vtkProperty::GetNumberOfGenerationsFromBaseType( arg_0.c_str());}))
    .function("GetNumberOfGenerationsFromBase", emscripten::optional_override([](vtkProperty& self, const std::string & arg_0) -> int {  return self.GetNumberOfGenerationsFromBase( arg_0.c_str());}))
    .function("DeepCopy", &vtkProperty::DeepCopy, emscripten::allow_raw_pointers())
    .function("Render", &vtkProperty::Render, emscripten::allow_raw_pointers())
    .function("BackfaceRender", &vtkProperty::BackfaceRender, emscripten::allow_raw_pointers())
    .function("PostRender", &vtkProperty::PostRender, emscripten::allow_raw_pointers())
    .function("GetLighting", &vtkProperty::GetLighting)
    .function("SetLighting", &vtkProperty::SetLighting)
    .function("LightingOn", &vtkProperty::LightingOn)
    .function("LightingOff", &vtkProperty::LightingOff)
    .function("GetRenderPointsAsSpheres", &vtkProperty::GetRenderPointsAsSpheres)
    .function("SetRenderPointsAsSpheres", &vtkProperty::SetRenderPointsAsSpheres)
    .function("RenderPointsAsSpheresOn", &vtkProperty::RenderPointsAsSpheresOn)
    .function("RenderPointsAsSpheresOff", &vtkProperty::RenderPointsAsSpheresOff)
    .function("GetRenderLinesAsTubes", &vtkProperty::GetRenderLinesAsTubes)
    .function("SetRenderLinesAsTubes", &vtkProperty::SetRenderLinesAsTubes)
    .function("RenderLinesAsTubesOn", &vtkProperty::RenderLinesAsTubesOn)
    .function("RenderLinesAsTubesOff", &vtkProperty::RenderLinesAsTubesOff)
    .function("SetInterpolation", &vtkProperty::SetInterpolation)
    .function("GetInterpolationMinValue", &vtkProperty::GetInterpolationMinValue)
    .function("GetInterpolationMaxValue", &vtkProperty::GetInterpolationMaxValue)
    .function("GetInterpolation", &vtkProperty::GetInterpolation)
    .function("SetInterpolationToFlat", &vtkProperty::SetInterpolationToFlat)
    .function("SetInterpolationToGouraud", &vtkProperty::SetInterpolationToGouraud)
    .function("SetInterpolationToPhong", &vtkProperty::SetInterpolationToPhong)
    .function("SetInterpolationToPBR", &vtkProperty::SetInterpolationToPBR)
    .function("GetInterpolationAsString", emscripten::optional_override([](vtkProperty& self) -> std::string {  return self.GetInterpolationAsString();}))
    .function("SetRepresentation", &vtkProperty::SetRepresentation)
    .function("GetRepresentationMinValue", &vtkProperty::GetRepresentationMinValue)
    .function("GetRepresentationMaxValue", &vtkProperty::GetRepresentationMaxValue)
    .function("GetRepresentation", &vtkProperty::GetRepresentation)
    .function("SetRepresentationToPoints", &vtkProperty::SetRepresentationToPoints)
    .function("SetRepresentationToWireframe", &vtkProperty::SetRepresentationToWireframe)
    .function("SetRepresentationToSurface", &vtkProperty::SetRepresentationToSurface)
    .function("GetRepresentationAsString", emscripten::optional_override([](vtkProperty& self) -> std::string {  return self.GetRepresentationAsString();}))
    .function("SetColor", emscripten::select_overload<void(vtkProperty&, double, double, double)>([](vtkProperty& self, double arg_0, double arg_1, double arg_2) -> void { return self.SetColor( arg_0, arg_1, arg_2); }))
    .function("SetBaseIOR", &vtkProperty::SetBaseIOR)
    .function("GetBaseIORMinValue", &vtkProperty::GetBaseIORMinValue)
    .function("GetBaseIORMaxValue", &vtkProperty::GetBaseIORMaxValue)
    .function("GetBaseIOR", &vtkProperty::GetBaseIOR)
    .function("SetMetallic", &vtkProperty::SetMetallic)
    .function("GetMetallicMinValue", &vtkProperty::GetMetallicMinValue)
    .function("GetMetallicMaxValue", &vtkProperty::GetMetallicMaxValue)
    .function("GetMetallic", &vtkProperty::GetMetallic)
    .function("SetRoughness", &vtkProperty::SetRoughness)
    .function("GetRoughnessMinValue", &vtkProperty::GetRoughnessMinValue)
    .function("GetRoughnessMaxValue", &vtkProperty::GetRoughnessMaxValue)
    .function("GetRoughness", &vtkProperty::GetRoughness)
    .function("SetAnisotropy", &vtkProperty::SetAnisotropy)
    .function("GetAnisotropyMinValue", &vtkProperty::GetAnisotropyMinValue)
    .function("GetAnisotropyMaxValue", &vtkProperty::GetAnisotropyMaxValue)
    .function("GetAnisotropy", &vtkProperty::GetAnisotropy)
    .function("SetAnisotropyRotation", &vtkProperty::SetAnisotropyRotation)
    .function("GetAnisotropyRotationMinValue", &vtkProperty::GetAnisotropyRotationMinValue)
    .function("GetAnisotropyRotationMaxValue", &vtkProperty::GetAnisotropyRotationMaxValue)
    .function("GetAnisotropyRotation", &vtkProperty::GetAnisotropyRotation)
    .function("SetCoatIOR", &vtkProperty::SetCoatIOR)
    .function("GetCoatIORMinValue", &vtkProperty::GetCoatIORMinValue)
    .function("GetCoatIORMaxValue", &vtkProperty::GetCoatIORMaxValue)
    .function("GetCoatIOR", &vtkProperty::GetCoatIOR)
    .function("SetCoatRoughness", &vtkProperty::SetCoatRoughness)
    .function("GetCoatRoughnessMinValue", &vtkProperty::GetCoatRoughnessMinValue)
    .function("GetCoatRoughnessMaxValue", &vtkProperty::GetCoatRoughnessMaxValue)
    .function("GetCoatRoughness", &vtkProperty::GetCoatRoughness)
    .function("SetCoatStrength", &vtkProperty::SetCoatStrength)
    .function("GetCoatStrengthMinValue", &vtkProperty::GetCoatStrengthMinValue)
    .function("GetCoatStrengthMaxValue", &vtkProperty::GetCoatStrengthMaxValue)
    .function("GetCoatStrength", &vtkProperty::GetCoatStrength)
    .function("SetCoatColor", emscripten::select_overload<void(vtkProperty&, double, double, double)>([](vtkProperty& self, double arg_0, double arg_1, double arg_2) -> void { return self.SetCoatColor( arg_0, arg_1, arg_2); }))
    .function("SetCoatNormalScale", &vtkProperty::SetCoatNormalScale)
    .function("GetCoatNormalScaleMinValue", &vtkProperty::GetCoatNormalScaleMinValue)
    .function("GetCoatNormalScaleMaxValue", &vtkProperty::GetCoatNormalScaleMaxValue)
    .function("GetCoatNormalScale", &vtkProperty::GetCoatNormalScale)
    .function("SetNormalScale", &vtkProperty::SetNormalScale)
    .function("GetNormalScale", &vtkProperty::GetNormalScale)
    .function("SetOcclusionStrength", &vtkProperty::SetOcclusionStrength)
    .function("GetOcclusionStrengthMinValue", &vtkProperty::GetOcclusionStrengthMinValue)
    .function("GetOcclusionStrengthMaxValue", &vtkProperty::GetOcclusionStrengthMaxValue)
    .function("GetOcclusionStrength", &vtkProperty::GetOcclusionStrength)
    .function("SetEmissiveFactor", emscripten::select_overload<void(vtkProperty&, double, double, double)>([](vtkProperty& self, double arg_0, double arg_1, double arg_2) -> void { return self.SetEmissiveFactor( arg_0, arg_1, arg_2); }))
    .function("SetEdgeTint", emscripten::select_overload<void(vtkProperty&, double, double, double)>([](vtkProperty& self, double arg_0, double arg_1, double arg_2) -> void { return self.SetEdgeTint( arg_0, arg_1, arg_2); }))
    .function("SetAmbient", &vtkProperty::SetAmbient)
    .function("GetAmbientMinValue", &vtkProperty::GetAmbientMinValue)
    .function("GetAmbientMaxValue", &vtkProperty::GetAmbientMaxValue)
    .function("GetAmbient", &vtkProperty::GetAmbient)
    .function("SetDiffuse", &vtkProperty::SetDiffuse)
    .function("GetDiffuseMinValue", &vtkProperty::GetDiffuseMinValue)
    .function("GetDiffuseMaxValue", &vtkProperty::GetDiffuseMaxValue)
    .function("GetDiffuse", &vtkProperty::GetDiffuse)
    .function("SetSpecular", &vtkProperty::SetSpecular)
    .function("GetSpecularMinValue", &vtkProperty::GetSpecularMinValue)
    .function("GetSpecularMaxValue", &vtkProperty::GetSpecularMaxValue)
    .function("GetSpecular", &vtkProperty::GetSpecular)
    .function("SetSpecularPower", &vtkProperty::SetSpecularPower)
    .function("GetSpecularPowerMinValue", &vtkProperty::GetSpecularPowerMinValue)
    .function("GetSpecularPowerMaxValue", &vtkProperty::GetSpecularPowerMaxValue)
    .function("GetSpecularPower", &vtkProperty::GetSpecularPower)
    .function("SetOpacity", &vtkProperty::SetOpacity)
    .function("GetOpacityMinValue", &vtkProperty::GetOpacityMinValue)
    .function("GetOpacityMaxValue", &vtkProperty::GetOpacityMaxValue)
    .function("GetOpacity", &vtkProperty::GetOpacity)
    .function("SetEdgeOpacity", &vtkProperty::SetEdgeOpacity)
    .function("GetEdgeOpacityMinValue", &vtkProperty::GetEdgeOpacityMinValue)
    .function("GetEdgeOpacityMaxValue", &vtkProperty::GetEdgeOpacityMaxValue)
    .function("GetEdgeOpacity", &vtkProperty::GetEdgeOpacity)
    .function("SetAmbientColor", emscripten::select_overload<void(vtkProperty&, double, double, double)>([](vtkProperty& self, double arg_0, double arg_1, double arg_2) -> void { return self.SetAmbientColor( arg_0, arg_1, arg_2); }))
    .function("SetDiffuseColor", emscripten::select_overload<void(vtkProperty&, double, double, double)>([](vtkProperty& self, double arg_0, double arg_1, double arg_2) -> void { return self.SetDiffuseColor( arg_0, arg_1, arg_2); }))
    .function("SetSpecularColor", emscripten::select_overload<void(vtkProperty&, double, double, double)>([](vtkProperty& self, double arg_0, double arg_1, double arg_2) -> void { return self.SetSpecularColor( arg_0, arg_1, arg_2); }))
    .function("GetEdgeVisibility", &vtkProperty::GetEdgeVisibility)
    .function("SetEdgeVisibility", &vtkProperty::SetEdgeVisibility)
    .function("EdgeVisibilityOn", &vtkProperty::EdgeVisibilityOn)
    .function("EdgeVisibilityOff", &vtkProperty::EdgeVisibilityOff)
    .function("SetEdgeColor", emscripten::select_overload<void(vtkProperty&, double, double, double)>([](vtkProperty& self, double arg_0, double arg_1, double arg_2) -> void { return self.SetEdgeColor( arg_0, arg_1, arg_2); }))
    .function("GetVertexVisibility", &vtkProperty::GetVertexVisibility)
    .function("SetVertexVisibility", &vtkProperty::SetVertexVisibility)
    .function("VertexVisibilityOn", &vtkProperty::VertexVisibilityOn)
    .function("VertexVisibilityOff", &vtkProperty::VertexVisibilityOff)
    .function("SetVertexColor", emscripten::select_overload<void(vtkProperty&, double, double, double)>([](vtkProperty& self, double arg_0, double arg_1, double arg_2) -> void { return self.SetVertexColor( arg_0, arg_1, arg_2); }))
    .function("SetSelectionColor", emscripten::select_overload<void(vtkProperty&, double, double, double, double)>([](vtkProperty& self, double arg_0, double arg_1, double arg_2, double arg_3) -> void { return self.SetSelectionColor( arg_0, arg_1, arg_2, arg_3); }))
    .function("SetSelectionLineWidth", &vtkProperty::SetSelectionLineWidth)
    .function("GetSelectionLineWidth", &vtkProperty::GetSelectionLineWidth)
    .function("SetSelectionPointSize", &vtkProperty::SetSelectionPointSize)
    .function("GetSelectionPointSize", &vtkProperty::GetSelectionPointSize)
    .function("SetLineWidth", &vtkProperty::SetLineWidth)
    .function("GetLineWidthMinValue", &vtkProperty::GetLineWidthMinValue)
    .function("GetLineWidthMaxValue", &vtkProperty::GetLineWidthMaxValue)
    .function("GetLineWidth", &vtkProperty::GetLineWidth)
    .function("SetLineStipplePattern", &vtkProperty::SetLineStipplePattern)
    .function("GetLineStipplePattern", &vtkProperty::GetLineStipplePattern)
    .function("SetLineStippleRepeatFactor", &vtkProperty::SetLineStippleRepeatFactor)
    .function("GetLineStippleRepeatFactorMinValue", &vtkProperty::GetLineStippleRepeatFactorMinValue)
    .function("GetLineStippleRepeatFactorMaxValue", &vtkProperty::GetLineStippleRepeatFactorMaxValue)
    .function("GetLineStippleRepeatFactor", &vtkProperty::GetLineStippleRepeatFactor)
    .function("SetPointSize", &vtkProperty::SetPointSize)
    .function("GetPointSizeMinValue", &vtkProperty::GetPointSizeMinValue)
    .function("GetPointSizeMaxValue", &vtkProperty::GetPointSizeMaxValue)
    .function("GetPointSize", &vtkProperty::GetPointSize)
    .function("GetBackfaceCulling", &vtkProperty::GetBackfaceCulling)
    .function("SetBackfaceCulling", &vtkProperty::SetBackfaceCulling)
    .function("BackfaceCullingOn", &vtkProperty::BackfaceCullingOn)
    .function("BackfaceCullingOff", &vtkProperty::BackfaceCullingOff)
    .function("GetFrontfaceCulling", &vtkProperty::GetFrontfaceCulling)
    .function("SetFrontfaceCulling", &vtkProperty::SetFrontfaceCulling)
    .function("FrontfaceCullingOn", &vtkProperty::FrontfaceCullingOn)
    .function("FrontfaceCullingOff", &vtkProperty::FrontfaceCullingOff)
    .function("SetMaterialName", emscripten::optional_override([](vtkProperty& self, const std::string & arg_0) -> void {  return self.SetMaterialName( arg_0.c_str());}))
    .function("GetMaterialName", emscripten::optional_override([](vtkProperty& self) -> std::string {  return self.GetMaterialName();}))
    .function("SetShading", &vtkProperty::SetShading)
    .function("GetShading", &vtkProperty::GetShading)
    .function("ShadingOn", &vtkProperty::ShadingOn)
    .function("ShadingOff", &vtkProperty::ShadingOff)
    .function("AddShaderVariable", emscripten::select_overload<void(vtkProperty&, const std::string &, int, std::uintptr_t)>([](vtkProperty& self, const std::string & arg_0, int arg_1, std::uintptr_t arg_2) -> void { return self.AddShaderVariable( arg_0.c_str(), arg_1,reinterpret_cast<int*>(arg_2 * sizeof(int))); }))
    .function("AddShaderVariable", emscripten::select_overload<void(vtkProperty&, const std::string &, int, std::uintptr_t)>([](vtkProperty& self, const std::string & arg_0, int arg_1, std::uintptr_t arg_2) -> void { return self.AddShaderVariable( arg_0.c_str(), arg_1,reinterpret_cast<float*>(arg_2 * sizeof(float))); }))
    .function("AddShaderVariable", emscripten::select_overload<void(vtkProperty&, const std::string &, int, std::uintptr_t)>([](vtkProperty& self, const std::string & arg_0, int arg_1, std::uintptr_t arg_2) -> void { return self.AddShaderVariable( arg_0.c_str(), arg_1,reinterpret_cast<double*>(arg_2 * sizeof(double))); }))
    .function("AddShaderVariable", emscripten::select_overload<void(vtkProperty&, const std::string &, int, int)>([](vtkProperty& self, const std::string & arg_0, int arg_1, int arg_2) -> void { return self.AddShaderVariable( arg_0.c_str(), arg_1, arg_2); }))
    .function("AddShaderVariable", emscripten::select_overload<void(vtkProperty&, const std::string &, float, float)>([](vtkProperty& self, const std::string & arg_0, float arg_1, float arg_2) -> void { return self.AddShaderVariable( arg_0.c_str(), arg_1, arg_2); }))
    .function("AddShaderVariable", emscripten::select_overload<void(vtkProperty&, const std::string &, double, double)>([](vtkProperty& self, const std::string & arg_0, double arg_1, double arg_2) -> void { return self.AddShaderVariable( arg_0.c_str(), arg_1, arg_2); }))
    .function("AddShaderVariable", emscripten::select_overload<void(vtkProperty&, const std::string &, int)>([](vtkProperty& self, const std::string & arg_0, int arg_1) -> void { return self.AddShaderVariable( arg_0.c_str(), arg_1); }))
    .function("AddShaderVariable", emscripten::select_overload<void(vtkProperty&, const std::string &, float)>([](vtkProperty& self, const std::string & arg_0, float arg_1) -> void { return self.AddShaderVariable( arg_0.c_str(), arg_1); }))
    .function("AddShaderVariable", emscripten::select_overload<void(vtkProperty&, const std::string &, double)>([](vtkProperty& self, const std::string & arg_0, double arg_1) -> void { return self.AddShaderVariable( arg_0.c_str(), arg_1); }))
    .function("AddShaderVariable", emscripten::select_overload<void(vtkProperty&, const std::string &, int, int, int)>([](vtkProperty& self, const std::string & arg_0, int arg_1, int arg_2, int arg_3) -> void { return self.AddShaderVariable( arg_0.c_str(), arg_1, arg_2, arg_3); }))
    .function("AddShaderVariable", emscripten::select_overload<void(vtkProperty&, const std::string &, float, float, float)>([](vtkProperty& self, const std::string & arg_0, float arg_1, float arg_2, float arg_3) -> void { return self.AddShaderVariable( arg_0.c_str(), arg_1, arg_2, arg_3); }))
    .function("AddShaderVariable", emscripten::select_overload<void(vtkProperty&, const std::string &, double, double, double)>([](vtkProperty& self, const std::string & arg_0, double arg_1, double arg_2, double arg_3) -> void { return self.AddShaderVariable( arg_0.c_str(), arg_1, arg_2, arg_3); }))
    .function("SetShowTexturesOnBackface", &vtkProperty::SetShowTexturesOnBackface)
    .function("GetShowTexturesOnBackface", &vtkProperty::GetShowTexturesOnBackface)
    .function("ShowTexturesOnBackfaceOn", &vtkProperty::ShowTexturesOnBackfaceOn)
    .function("ShowTexturesOnBackfaceOff", &vtkProperty::ShowTexturesOnBackfaceOff)
    .function("SetTexture", emscripten::optional_override([](vtkProperty& self, const std::string & arg_0, vtkTexture* arg_1) -> void {  return self.SetTexture( arg_0.c_str(), arg_1);}), emscripten::allow_raw_pointers())
    .function("GetTexture", emscripten::optional_override([](vtkProperty& self, const std::string & arg_0) -> vtkTexture* {  return self.GetTexture( arg_0.c_str());}), emscripten::allow_raw_pointers())
    .function("SetBaseColorTexture", &vtkProperty::SetBaseColorTexture, emscripten::allow_raw_pointers())
    .function("SetORMTexture", &vtkProperty::SetORMTexture, emscripten::allow_raw_pointers())
    .function("SetAnisotropyTexture", &vtkProperty::SetAnisotropyTexture, emscripten::allow_raw_pointers())
    .function("SetNormalTexture", &vtkProperty::SetNormalTexture, emscripten::allow_raw_pointers())
    .function("SetEmissiveTexture", &vtkProperty::SetEmissiveTexture, emscripten::allow_raw_pointers())
    .function("SetCoatNormalTexture", &vtkProperty::SetCoatNormalTexture, emscripten::allow_raw_pointers())
    .function("RemoveTexture", emscripten::optional_override([](vtkProperty& self, const std::string & arg_0) -> void {  return self.RemoveTexture( arg_0.c_str());}))
    .function("RemoveAllTextures", &vtkProperty::RemoveAllTextures)
    .function("GetNumberOfTextures", &vtkProperty::GetNumberOfTextures)
    .function("ReleaseGraphicsResources", &vtkProperty::ReleaseGraphicsResources, emscripten::allow_raw_pointers())
    .function("GetInformation", &vtkProperty::GetInformation, emscripten::allow_raw_pointers())
    .function("SetInformation", &vtkProperty::SetInformation, emscripten::allow_raw_pointers())
    .class_function("ComputeReflectanceFromIOR", &vtkProperty::ComputeReflectanceFromIOR)
    .class_function("ComputeIORFromReflectance", &vtkProperty::ComputeIORFromReflectance)
    .function("ComputeReflectanceOfBaseLayer", &vtkProperty::ComputeReflectanceOfBaseLayer);
}
