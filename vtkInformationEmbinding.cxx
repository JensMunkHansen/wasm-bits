// JavaScript wrapper for vtkInformation with embind 
//
// This file was auto-generated using :
/*
node /home/jmh/github/VTKCMake/build/library/VTK-prefix/src/VTK-build/bin/vtkWrapJavaScript.js \
 @/home/jmh/github/VTKCMake/build/library/VTK-prefix/src/VTK-build/CMakeFiles/vtkCommonCore.js/vtkCommonCore.js.Release.args \
 -o \
 /home/jmh/github/VTKCMake/build/library/VTK-prefix/src/VTK-build/CMakeFiles/vtkCommonCore.js/vtkInformationEmbinding.cxx \
 /home/jmh/github/vtk/Common/Core/vtkInformation.h
*/
#include "vtkEmbindSmartPointerTrait.h"
#include <emscripten.h>
#include <string>
#include "vtkVariant.h"
#include "vtkObjectBase.h"
#include "vtkIndent.h"
#include "vtkInformationKey.h"
#include "vtkInformationDataObjectKey.h"
#include "vtkInformationDoubleVectorKey.h"
#include "vtkInformationVariantKey.h"
#include "vtkInformationVariantVectorKey.h"
#include "vtkInformationInformationKey.h"
#include "vtkInformationInformationVectorKey.h"
#include "vtkInformationIntegerKey.h"
#include "vtkInformationIntegerVectorKey.h"
#include "vtkInformationObjectBaseVectorKey.h"
#include "vtkInformationRequestKey.h"
#include "vtkInformationStringKey.h"
#include "vtkInformationStringVectorKey.h"
#include "vtkInformationUnsignedLongKey.h"
#include "vtkInformationKeyVectorKey.h"
#include "vtkInformationIdTypeKey.h"
#include "vtkInformationDoubleKey.h"
#include "vtkInformationIntegerPointerKey.h"
#include "vtkInformationObjectBaseKey.h"
#include "vtkInformationVector.h"
#include "vtkInformation.h"

template<> void emscripten::internal::raw_destructor<vtkInformation>(vtkInformation * ptr){ ptr->Delete(); }
EMSCRIPTEN_BINDINGS(vtkInformation_class) {
  emscripten::class_<vtkInformation, emscripten::base<vtkObject>>("vtkInformation")
    .smart_ptr<vtkSmartPointer<vtkInformation>>("vtkSmartPointer<vtkInformation>")
    .constructor(&vtk::MakeVTKSmartPtr<vtkInformation>)
    .class_function("IsTypeOf", emscripten::optional_override([]( const std::string & arg_0) -> int {  return vtkInformation::IsTypeOf( arg_0.c_str());}))
    .function("IsA", emscripten::optional_override([](vtkInformation& self, const std::string & arg_0) -> int {  return self.IsA( arg_0.c_str());}))
    .class_function("SafeDownCast", &vtkInformation::SafeDownCast, emscripten::allow_raw_pointers())
    .function("NewInstance", &vtkInformation::NewInstance, emscripten::allow_raw_pointers())
    .class_function("GetNumberOfGenerationsFromBaseType", emscripten::optional_override([]( const std::string & arg_0) -> int {  return vtkInformation::GetNumberOfGenerationsFromBaseType( arg_0.c_str());}))
    .function("GetNumberOfGenerationsFromBase", emscripten::optional_override([](vtkInformation& self, const std::string & arg_0) -> int {  return self.GetNumberOfGenerationsFromBase( arg_0.c_str());}))
    .function("Modified", emscripten::select_overload<void(vtkInformation&)>([](vtkInformation& self) -> void { return self.Modified(); }))
    .function("Modified", emscripten::select_overload<void(vtkInformation&, vtkInformationKey*)>([](vtkInformation& self, vtkInformationKey* arg_0) -> void { return self.Modified( arg_0); }), emscripten::allow_raw_pointers())
    .function("Clear", &vtkInformation::Clear)
    .function("GetNumberOfKeys", &vtkInformation::GetNumberOfKeys)
    .function("Copy", &vtkInformation::Copy, emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformation*, int)>([](vtkInformation& self, vtkInformation* arg_0, int arg_1) -> void { return self.Append( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformationIntegerVectorKey*, int)>([](vtkInformation& self, vtkInformationIntegerVectorKey* arg_0, int arg_1) -> void { return self.Append( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformationStringVectorKey*, const std::string &)>([](vtkInformation& self, vtkInformationStringVectorKey* arg_0, const std::string & arg_1) -> void { return self.Append( arg_0, arg_1.c_str()); }), emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformationStringVectorKey*, const std::string&)>([](vtkInformation& self, vtkInformationStringVectorKey* arg_0, const std::string& arg_1) -> void { return self.Append( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformationDoubleVectorKey*, double)>([](vtkInformation& self, vtkInformationDoubleVectorKey* arg_0, double arg_1) -> void { return self.Append( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformationVariantVectorKey*, const vtkVariant&)>([](vtkInformation& self, vtkInformationVariantVectorKey* arg_0, const vtkVariant& arg_1) -> void { return self.Append( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationKey* arg_1) -> void { return self.Append( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationDataObjectKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationDataObjectKey* arg_1) -> void { return self.Append( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationDoubleKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationDoubleKey* arg_1) -> void { return self.Append( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationDoubleVectorKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationDoubleVectorKey* arg_1) -> void { return self.Append( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationInformationKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationInformationKey* arg_1) -> void { return self.Append( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationInformationVectorKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationInformationVectorKey* arg_1) -> void { return self.Append( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationIntegerKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationIntegerKey* arg_1) -> void { return self.Append( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationIntegerVectorKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationIntegerVectorKey* arg_1) -> void { return self.Append( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationStringKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationStringKey* arg_1) -> void { return self.Append( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationStringVectorKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationStringVectorKey* arg_1) -> void { return self.Append( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationObjectBaseKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationObjectBaseKey* arg_1) -> void { return self.Append( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationUnsignedLongKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationUnsignedLongKey* arg_1) -> void { return self.Append( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Append", emscripten::select_overload<void(vtkInformation&, vtkInformationObjectBaseVectorKey*, vtkObjectBase*)>([](vtkInformation& self, vtkInformationObjectBaseVectorKey* arg_0, vtkObjectBase* arg_1) -> void { return self.Append( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("CopyEntry", emscripten::select_overload<void(vtkInformation&, vtkInformation*, vtkInformationKey*, int)>([](vtkInformation& self, vtkInformation* arg_0, vtkInformationKey* arg_1, int arg_2) -> void { return self.CopyEntry( arg_0, arg_1, arg_2); }), emscripten::allow_raw_pointers())
    .function("CopyEntry", emscripten::select_overload<void(vtkInformation&, vtkInformation*, vtkInformationDataObjectKey*, int)>([](vtkInformation& self, vtkInformation* arg_0, vtkInformationDataObjectKey* arg_1, int arg_2) -> void { return self.CopyEntry( arg_0, arg_1, arg_2); }), emscripten::allow_raw_pointers())
    .function("CopyEntry", emscripten::select_overload<void(vtkInformation&, vtkInformation*, vtkInformationDoubleVectorKey*, int)>([](vtkInformation& self, vtkInformation* arg_0, vtkInformationDoubleVectorKey* arg_1, int arg_2) -> void { return self.CopyEntry( arg_0, arg_1, arg_2); }), emscripten::allow_raw_pointers())
    .function("CopyEntry", emscripten::select_overload<void(vtkInformation&, vtkInformation*, vtkInformationVariantKey*, int)>([](vtkInformation& self, vtkInformation* arg_0, vtkInformationVariantKey* arg_1, int arg_2) -> void { return self.CopyEntry( arg_0, arg_1, arg_2); }), emscripten::allow_raw_pointers())
    .function("CopyEntry", emscripten::select_overload<void(vtkInformation&, vtkInformation*, vtkInformationVariantVectorKey*, int)>([](vtkInformation& self, vtkInformation* arg_0, vtkInformationVariantVectorKey* arg_1, int arg_2) -> void { return self.CopyEntry( arg_0, arg_1, arg_2); }), emscripten::allow_raw_pointers())
    .function("CopyEntry", emscripten::select_overload<void(vtkInformation&, vtkInformation*, vtkInformationInformationKey*, int)>([](vtkInformation& self, vtkInformation* arg_0, vtkInformationInformationKey* arg_1, int arg_2) -> void { return self.CopyEntry( arg_0, arg_1, arg_2); }), emscripten::allow_raw_pointers())
    .function("CopyEntry", emscripten::select_overload<void(vtkInformation&, vtkInformation*, vtkInformationInformationVectorKey*, int)>([](vtkInformation& self, vtkInformation* arg_0, vtkInformationInformationVectorKey* arg_1, int arg_2) -> void { return self.CopyEntry( arg_0, arg_1, arg_2); }), emscripten::allow_raw_pointers())
    .function("CopyEntry", emscripten::select_overload<void(vtkInformation&, vtkInformation*, vtkInformationIntegerKey*, int)>([](vtkInformation& self, vtkInformation* arg_0, vtkInformationIntegerKey* arg_1, int arg_2) -> void { return self.CopyEntry( arg_0, arg_1, arg_2); }), emscripten::allow_raw_pointers())
    .function("CopyEntry", emscripten::select_overload<void(vtkInformation&, vtkInformation*, vtkInformationIntegerVectorKey*, int)>([](vtkInformation& self, vtkInformation* arg_0, vtkInformationIntegerVectorKey* arg_1, int arg_2) -> void { return self.CopyEntry( arg_0, arg_1, arg_2); }), emscripten::allow_raw_pointers())
    .function("CopyEntry", emscripten::select_overload<void(vtkInformation&, vtkInformation*, vtkInformationObjectBaseVectorKey*, int)>([](vtkInformation& self, vtkInformation* arg_0, vtkInformationObjectBaseVectorKey* arg_1, int arg_2) -> void { return self.CopyEntry( arg_0, arg_1, arg_2); }), emscripten::allow_raw_pointers())
    .function("CopyEntry", emscripten::select_overload<void(vtkInformation&, vtkInformation*, vtkInformationRequestKey*, int)>([](vtkInformation& self, vtkInformation* arg_0, vtkInformationRequestKey* arg_1, int arg_2) -> void { return self.CopyEntry( arg_0, arg_1, arg_2); }), emscripten::allow_raw_pointers())
    .function("CopyEntry", emscripten::select_overload<void(vtkInformation&, vtkInformation*, vtkInformationStringKey*, int)>([](vtkInformation& self, vtkInformation* arg_0, vtkInformationStringKey* arg_1, int arg_2) -> void { return self.CopyEntry( arg_0, arg_1, arg_2); }), emscripten::allow_raw_pointers())
    .function("CopyEntry", emscripten::select_overload<void(vtkInformation&, vtkInformation*, vtkInformationStringVectorKey*, int)>([](vtkInformation& self, vtkInformation* arg_0, vtkInformationStringVectorKey* arg_1, int arg_2) -> void { return self.CopyEntry( arg_0, arg_1, arg_2); }), emscripten::allow_raw_pointers())
    .function("CopyEntry", emscripten::select_overload<void(vtkInformation&, vtkInformation*, vtkInformationUnsignedLongKey*, int)>([](vtkInformation& self, vtkInformation* arg_0, vtkInformationUnsignedLongKey* arg_1, int arg_2) -> void { return self.CopyEntry( arg_0, arg_1, arg_2); }), emscripten::allow_raw_pointers())
    .function("CopyEntries", &vtkInformation::CopyEntries, emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationKey*)>([](vtkInformation& self, vtkInformationKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationRequestKey*)>([](vtkInformation& self, vtkInformationRequestKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationIntegerKey*)>([](vtkInformation& self, vtkInformationIntegerKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationIdTypeKey*)>([](vtkInformation& self, vtkInformationIdTypeKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationDoubleKey*)>([](vtkInformation& self, vtkInformationDoubleKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationVariantKey*)>([](vtkInformation& self, vtkInformationVariantKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationIntegerVectorKey*)>([](vtkInformation& self, vtkInformationIntegerVectorKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationStringVectorKey*)>([](vtkInformation& self, vtkInformationStringVectorKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationIntegerPointerKey*)>([](vtkInformation& self, vtkInformationIntegerPointerKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationUnsignedLongKey*)>([](vtkInformation& self, vtkInformationUnsignedLongKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationDoubleVectorKey*)>([](vtkInformation& self, vtkInformationDoubleVectorKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationVariantVectorKey*)>([](vtkInformation& self, vtkInformationVariantVectorKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationKeyVectorKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationStringKey*)>([](vtkInformation& self, vtkInformationStringKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationInformationKey*)>([](vtkInformation& self, vtkInformationInformationKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationInformationVectorKey*)>([](vtkInformation& self, vtkInformationInformationVectorKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationObjectBaseKey*)>([](vtkInformation& self, vtkInformationObjectBaseKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationObjectBaseVectorKey*)>([](vtkInformation& self, vtkInformationObjectBaseVectorKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Has", emscripten::select_overload<int(vtkInformation&, vtkInformationDataObjectKey*)>([](vtkInformation& self, vtkInformationDataObjectKey* arg_0) -> int { return self.Has( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationKey*)>([](vtkInformation& self, vtkInformationKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationRequestKey*)>([](vtkInformation& self, vtkInformationRequestKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationIntegerKey*)>([](vtkInformation& self, vtkInformationIntegerKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationIdTypeKey*)>([](vtkInformation& self, vtkInformationIdTypeKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationDoubleKey*)>([](vtkInformation& self, vtkInformationDoubleKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationVariantKey*)>([](vtkInformation& self, vtkInformationVariantKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationIntegerVectorKey*)>([](vtkInformation& self, vtkInformationIntegerVectorKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationStringVectorKey*)>([](vtkInformation& self, vtkInformationStringVectorKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationIntegerPointerKey*)>([](vtkInformation& self, vtkInformationIntegerPointerKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationUnsignedLongKey*)>([](vtkInformation& self, vtkInformationUnsignedLongKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationDoubleVectorKey*)>([](vtkInformation& self, vtkInformationDoubleVectorKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationVariantVectorKey*)>([](vtkInformation& self, vtkInformationVariantVectorKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationStringKey*)>([](vtkInformation& self, vtkInformationStringKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationInformationKey*)>([](vtkInformation& self, vtkInformationInformationKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationInformationVectorKey*)>([](vtkInformation& self, vtkInformationInformationVectorKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationObjectBaseKey*)>([](vtkInformation& self, vtkInformationObjectBaseKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationObjectBaseVectorKey*)>([](vtkInformation& self, vtkInformationObjectBaseVectorKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationDataObjectKey*)>([](vtkInformation& self, vtkInformationDataObjectKey* arg_0) -> void { return self.Remove( arg_0); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationKey* arg_1) -> void { return self.Remove( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationObjectBaseVectorKey*, vtkObjectBase*)>([](vtkInformation& self, vtkInformationObjectBaseVectorKey* arg_0, vtkObjectBase* arg_1) -> void { return self.Remove( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Remove", emscripten::select_overload<void(vtkInformation&, vtkInformationObjectBaseVectorKey*, int)>([](vtkInformation& self, vtkInformationObjectBaseVectorKey* arg_0, int arg_1) -> void { return self.Remove( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationRequestKey*)>([](vtkInformation& self, vtkInformationRequestKey* arg_0) -> void { return self.Set( arg_0); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationIntegerKey*, int)>([](vtkInformation& self, vtkInformationIntegerKey* arg_0, int arg_1) -> void { return self.Set( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationIdTypeKey*, int)>([](vtkInformation& self, vtkInformationIdTypeKey* arg_0, int arg_1) -> void { return self.Set( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationDoubleKey*, double)>([](vtkInformation& self, vtkInformationDoubleKey* arg_0, double arg_1) -> void { return self.Set( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationVariantKey*, const vtkVariant&)>([](vtkInformation& self, vtkInformationVariantKey* arg_0, const vtkVariant& arg_1) -> void { return self.Set( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationUnsignedLongKey*, unsigned long)>([](vtkInformation& self, vtkInformationUnsignedLongKey* arg_0, unsigned long arg_1) -> void { return self.Set( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationStringKey*, const std::string &)>([](vtkInformation& self, vtkInformationStringKey* arg_0, const std::string & arg_1) -> void { return self.Set( arg_0, arg_1.c_str()); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationStringKey*, const std::string&)>([](vtkInformation& self, vtkInformationStringKey* arg_0, const std::string& arg_1) -> void { return self.Set( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationInformationKey*, vtkInformation*)>([](vtkInformation& self, vtkInformationInformationKey* arg_0, vtkInformation* arg_1) -> void { return self.Set( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationInformationVectorKey*, vtkInformationVector*)>([](vtkInformation& self, vtkInformationInformationVectorKey* arg_0, vtkInformationVector* arg_1) -> void { return self.Set( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationObjectBaseKey*, vtkObjectBase*)>([](vtkInformation& self, vtkInformationObjectBaseKey* arg_0, vtkObjectBase* arg_1) -> void { return self.Set( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationDataObjectKey*, vtkDataObject*)>([](vtkInformation& self, vtkInformationDataObjectKey* arg_0, vtkDataObject* arg_1) -> void { return self.Set( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationIntegerVectorKey*, std::uintptr_t, int)>([](vtkInformation& self, vtkInformationIntegerVectorKey* arg_0, std::uintptr_t arg_1, int arg_2) -> void { return self.Set( arg_0,reinterpret_cast<int*>(arg_1 * sizeof(int)), arg_2); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationStringVectorKey*, const std::string &, int)>([](vtkInformation& self, vtkInformationStringVectorKey* arg_0, const std::string & arg_1, int arg_2) -> void { return self.Set( arg_0, arg_1.c_str(), arg_2); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationStringVectorKey*, const std::string&, int)>([](vtkInformation& self, vtkInformationStringVectorKey* arg_0, const std::string& arg_1, int arg_2) -> void { return self.Set( arg_0, arg_1, arg_2); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationIntegerPointerKey*, std::uintptr_t, int)>([](vtkInformation& self, vtkInformationIntegerPointerKey* arg_0, std::uintptr_t arg_1, int arg_2) -> void { return self.Set( arg_0,reinterpret_cast<int*>(arg_1 * sizeof(int)), arg_2); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationDoubleVectorKey*, std::uintptr_t, int)>([](vtkInformation& self, vtkInformationDoubleVectorKey* arg_0, std::uintptr_t arg_1, int arg_2) -> void { return self.Set( arg_0,reinterpret_cast<double*>(arg_1 * sizeof(double)), arg_2); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationObjectBaseVectorKey*, vtkObjectBase*, int)>([](vtkInformation& self, vtkInformationObjectBaseVectorKey* arg_0, vtkObjectBase* arg_1, int arg_2) -> void { return self.Set( arg_0, arg_1, arg_2); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationIntegerVectorKey*, int, int, int)>([](vtkInformation& self, vtkInformationIntegerVectorKey* arg_0, int arg_1, int arg_2, int arg_3) -> void { return self.Set( arg_0, arg_1, arg_2, arg_3); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationDoubleVectorKey*, double, double, double)>([](vtkInformation& self, vtkInformationDoubleVectorKey* arg_0, double arg_1, double arg_2, double arg_3) -> void { return self.Set( arg_0, arg_1, arg_2, arg_3); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationVariantVectorKey*, const vtkVariant&, const vtkVariant&, const vtkVariant&)>([](vtkInformation& self, vtkInformationVariantVectorKey* arg_0, const vtkVariant& arg_1, const vtkVariant& arg_2, const vtkVariant& arg_3) -> void { return self.Set( arg_0, arg_1, arg_2, arg_3); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationIntegerVectorKey*, int, int, int, int, int, int)>([](vtkInformation& self, vtkInformationIntegerVectorKey* arg_0, int arg_1, int arg_2, int arg_3, int arg_4, int arg_5, int arg_6) -> void { return self.Set( arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationDoubleVectorKey*, double, double, double, double, double, double)>([](vtkInformation& self, vtkInformationDoubleVectorKey* arg_0, double arg_1, double arg_2, double arg_3, double arg_4, double arg_5, double arg_6) -> void { return self.Set( arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6); }), emscripten::allow_raw_pointers())
    .function("Set", emscripten::select_overload<void(vtkInformation&, vtkInformationVariantVectorKey*, const vtkVariant&, const vtkVariant&, const vtkVariant&, const vtkVariant&, const vtkVariant&, const vtkVariant&)>([](vtkInformation& self, vtkInformationVariantVectorKey* arg_0, const vtkVariant& arg_1, const vtkVariant& arg_2, const vtkVariant& arg_3, const vtkVariant& arg_4, const vtkVariant& arg_5, const vtkVariant& arg_6) -> void { return self.Set( arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<int(vtkInformation&, vtkInformationIntegerKey*)>([](vtkInformation& self, vtkInformationIntegerKey* arg_0) -> int { return self.Get( arg_0); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<int(vtkInformation&, vtkInformationIdTypeKey*)>([](vtkInformation& self, vtkInformationIdTypeKey* arg_0) -> int { return self.Get( arg_0); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<double(vtkInformation&, vtkInformationDoubleKey*)>([](vtkInformation& self, vtkInformationDoubleKey* arg_0) -> double { return self.Get( arg_0); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<vtkVariant(vtkInformation&, vtkInformationVariantKey*)>([](vtkInformation& self, vtkInformationVariantKey* arg_0) -> vtkVariant { return self.Get( arg_0); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<std::uintptr_t(vtkInformation&, vtkInformationIntegerPointerKey*)>([](vtkInformation& self, vtkInformationIntegerPointerKey* arg_0) -> std::uintptr_t { return reinterpret_cast<std::uintptr_t>(self.Get( arg_0)); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<unsigned long(vtkInformation&, vtkInformationUnsignedLongKey*)>([](vtkInformation& self, vtkInformationUnsignedLongKey* arg_0) -> unsigned long { return self.Get( arg_0); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<std::string(vtkInformation&, vtkInformationStringKey*)>([](vtkInformation& self, vtkInformationStringKey* arg_0) -> std::string { return self.Get( arg_0); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<vtkInformation*(vtkInformation&, vtkInformationInformationKey*)>([](vtkInformation& self, vtkInformationInformationKey* arg_0) -> vtkInformation* { return self.Get( arg_0); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<vtkInformationVector*(vtkInformation&, vtkInformationInformationVectorKey*)>([](vtkInformation& self, vtkInformationInformationVectorKey* arg_0) -> vtkInformationVector* { return self.Get( arg_0); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<vtkObjectBase*(vtkInformation&, vtkInformationObjectBaseKey*)>([](vtkInformation& self, vtkInformationObjectBaseKey* arg_0) -> vtkObjectBase* { return self.Get( arg_0); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<vtkDataObject*(vtkInformation&, vtkInformationDataObjectKey*)>([](vtkInformation& self, vtkInformationDataObjectKey* arg_0) -> vtkDataObject* { return self.Get( arg_0); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<int(vtkInformation&, vtkInformationIntegerVectorKey*, int)>([](vtkInformation& self, vtkInformationIntegerVectorKey* arg_0, int arg_1) -> int { return self.Get( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<void(vtkInformation&, vtkInformationIntegerVectorKey*, std::uintptr_t)>([](vtkInformation& self, vtkInformationIntegerVectorKey* arg_0, std::uintptr_t arg_1) -> void { return self.Get( arg_0,reinterpret_cast<int*>(arg_1 * sizeof(int))); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<std::string(vtkInformation&, vtkInformationStringVectorKey*, int)>([](vtkInformation& self, vtkInformationStringVectorKey* arg_0, int arg_1) -> std::string { return self.Get( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<void(vtkInformation&, vtkInformationIntegerPointerKey*, std::uintptr_t)>([](vtkInformation& self, vtkInformationIntegerPointerKey* arg_0, std::uintptr_t arg_1) -> void { return self.Get( arg_0,reinterpret_cast<int*>(arg_1 * sizeof(int))); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<double(vtkInformation&, vtkInformationDoubleVectorKey*, int)>([](vtkInformation& self, vtkInformationDoubleVectorKey* arg_0, int arg_1) -> double { return self.Get( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<void(vtkInformation&, vtkInformationDoubleVectorKey*, std::uintptr_t)>([](vtkInformation& self, vtkInformationDoubleVectorKey* arg_0, std::uintptr_t arg_1) -> void { return self.Get( arg_0,reinterpret_cast<double*>(arg_1 * sizeof(double))); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<vtkVariant(vtkInformation&, vtkInformationVariantVectorKey*, int)>([](vtkInformation& self, vtkInformationVariantVectorKey* arg_0, int arg_1) -> vtkVariant { return self.Get( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<vtkInformationKey*(vtkInformation&, vtkInformationKeyVectorKey*, int)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, int arg_1) -> vtkInformationKey* { return self.Get( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Get", emscripten::select_overload<vtkObjectBase*(vtkInformation&, vtkInformationObjectBaseVectorKey*, int)>([](vtkInformation& self, vtkInformationObjectBaseVectorKey* arg_0, int arg_1) -> vtkObjectBase* { return self.Get( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("Length", emscripten::select_overload<int(vtkInformation&, vtkInformationIntegerVectorKey*)>([](vtkInformation& self, vtkInformationIntegerVectorKey* arg_0) -> int { return self.Length( arg_0); }), emscripten::allow_raw_pointers())
    .function("Length", emscripten::select_overload<int(vtkInformation&, vtkInformationStringVectorKey*)>([](vtkInformation& self, vtkInformationStringVectorKey* arg_0) -> int { return self.Length( arg_0); }), emscripten::allow_raw_pointers())
    .function("Length", emscripten::select_overload<int(vtkInformation&, vtkInformationIntegerPointerKey*)>([](vtkInformation& self, vtkInformationIntegerPointerKey* arg_0) -> int { return self.Length( arg_0); }), emscripten::allow_raw_pointers())
    .function("Length", emscripten::select_overload<int(vtkInformation&, vtkInformationDoubleVectorKey*)>([](vtkInformation& self, vtkInformationDoubleVectorKey* arg_0) -> int { return self.Length( arg_0); }), emscripten::allow_raw_pointers())
    .function("Length", emscripten::select_overload<int(vtkInformation&, vtkInformationVariantVectorKey*)>([](vtkInformation& self, vtkInformationVariantVectorKey* arg_0) -> int { return self.Length( arg_0); }), emscripten::allow_raw_pointers())
    .function("Length", emscripten::select_overload<int(vtkInformation&, vtkInformationKeyVectorKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0) -> int { return self.Length( arg_0); }), emscripten::allow_raw_pointers())
    .function("Length", emscripten::select_overload<int(vtkInformation&, vtkInformationObjectBaseVectorKey*)>([](vtkInformation& self, vtkInformationObjectBaseVectorKey* arg_0) -> int { return self.Length( arg_0); }), emscripten::allow_raw_pointers())
    .function("AppendUnique", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationKey* arg_1) -> void { return self.AppendUnique( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("AppendUnique", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationDataObjectKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationDataObjectKey* arg_1) -> void { return self.AppendUnique( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("AppendUnique", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationDoubleKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationDoubleKey* arg_1) -> void { return self.AppendUnique( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("AppendUnique", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationDoubleVectorKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationDoubleVectorKey* arg_1) -> void { return self.AppendUnique( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("AppendUnique", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationInformationKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationInformationKey* arg_1) -> void { return self.AppendUnique( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("AppendUnique", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationInformationVectorKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationInformationVectorKey* arg_1) -> void { return self.AppendUnique( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("AppendUnique", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationIntegerKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationIntegerKey* arg_1) -> void { return self.AppendUnique( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("AppendUnique", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationIntegerVectorKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationIntegerVectorKey* arg_1) -> void { return self.AppendUnique( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("AppendUnique", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationStringKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationStringKey* arg_1) -> void { return self.AppendUnique( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("AppendUnique", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationStringVectorKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationStringVectorKey* arg_1) -> void { return self.AppendUnique( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("AppendUnique", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationObjectBaseKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationObjectBaseKey* arg_1) -> void { return self.AppendUnique( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .function("AppendUnique", emscripten::select_overload<void(vtkInformation&, vtkInformationKeyVectorKey*, vtkInformationUnsignedLongKey*)>([](vtkInformation& self, vtkInformationKeyVectorKey* arg_0, vtkInformationUnsignedLongKey* arg_1) -> void { return self.AppendUnique( arg_0, arg_1); }), emscripten::allow_raw_pointers())
    .class_function("GetKey", emscripten::select_overload<vtkInformationKey*( vtkInformationDataObjectKey*)>([]( vtkInformationDataObjectKey* arg_0) -> vtkInformationKey* { return vtkInformation::GetKey( arg_0); }), emscripten::allow_raw_pointers())
    .class_function("GetKey", emscripten::select_overload<vtkInformationKey*( vtkInformationDoubleKey*)>([]( vtkInformationDoubleKey* arg_0) -> vtkInformationKey* { return vtkInformation::GetKey( arg_0); }), emscripten::allow_raw_pointers())
    .class_function("GetKey", emscripten::select_overload<vtkInformationKey*( vtkInformationDoubleVectorKey*)>([]( vtkInformationDoubleVectorKey* arg_0) -> vtkInformationKey* { return vtkInformation::GetKey( arg_0); }), emscripten::allow_raw_pointers())
    .class_function("GetKey", emscripten::select_overload<vtkInformationKey*( vtkInformationInformationKey*)>([]( vtkInformationInformationKey* arg_0) -> vtkInformationKey* { return vtkInformation::GetKey( arg_0); }), emscripten::allow_raw_pointers())
    .class_function("GetKey", emscripten::select_overload<vtkInformationKey*( vtkInformationInformationVectorKey*)>([]( vtkInformationInformationVectorKey* arg_0) -> vtkInformationKey* { return vtkInformation::GetKey( arg_0); }), emscripten::allow_raw_pointers())
    .class_function("GetKey", emscripten::select_overload<vtkInformationKey*( vtkInformationIntegerKey*)>([]( vtkInformationIntegerKey* arg_0) -> vtkInformationKey* { return vtkInformation::GetKey( arg_0); }), emscripten::allow_raw_pointers())
    .class_function("GetKey", emscripten::select_overload<vtkInformationKey*( vtkInformationIntegerVectorKey*)>([]( vtkInformationIntegerVectorKey* arg_0) -> vtkInformationKey* { return vtkInformation::GetKey( arg_0); }), emscripten::allow_raw_pointers())
    .class_function("GetKey", emscripten::select_overload<vtkInformationKey*( vtkInformationRequestKey*)>([]( vtkInformationRequestKey* arg_0) -> vtkInformationKey* { return vtkInformation::GetKey( arg_0); }), emscripten::allow_raw_pointers())
    .class_function("GetKey", emscripten::select_overload<vtkInformationKey*( vtkInformationStringKey*)>([]( vtkInformationStringKey* arg_0) -> vtkInformationKey* { return vtkInformation::GetKey( arg_0); }), emscripten::allow_raw_pointers())
    .class_function("GetKey", emscripten::select_overload<vtkInformationKey*( vtkInformationStringVectorKey*)>([]( vtkInformationStringVectorKey* arg_0) -> vtkInformationKey* { return vtkInformation::GetKey( arg_0); }), emscripten::allow_raw_pointers())
    .class_function("GetKey", emscripten::select_overload<vtkInformationKey*( vtkInformationKey*)>([]( vtkInformationKey* arg_0) -> vtkInformationKey* { return vtkInformation::GetKey( arg_0); }), emscripten::allow_raw_pointers())
    .class_function("GetKey", emscripten::select_overload<vtkInformationKey*( vtkInformationUnsignedLongKey*)>([]( vtkInformationUnsignedLongKey* arg_0) -> vtkInformationKey* { return vtkInformation::GetKey( arg_0); }), emscripten::allow_raw_pointers())
    .class_function("GetKey", emscripten::select_overload<vtkInformationKey*( vtkInformationVariantKey*)>([]( vtkInformationVariantKey* arg_0) -> vtkInformationKey* { return vtkInformation::GetKey( arg_0); }), emscripten::allow_raw_pointers())
    .class_function("GetKey", emscripten::select_overload<vtkInformationKey*( vtkInformationVariantVectorKey*)>([]( vtkInformationVariantVectorKey* arg_0) -> vtkInformationKey* { return vtkInformation::GetKey( arg_0); }), emscripten::allow_raw_pointers())
    .function("UsesGarbageCollector", &vtkInformation::UsesGarbageCollector)
    .function("SetRequest", &vtkInformation::SetRequest, emscripten::allow_raw_pointers())
    .function("GetRequest", &vtkInformation::GetRequest, emscripten::allow_raw_pointers());
}
