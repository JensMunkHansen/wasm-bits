// JavaScript wrapper for vtkModelMetadata with embind 
//
// This file was auto-generated using :
/*
node /home/jmh/github/VTKCMake/build/library/VTK-prefix/src/VTK-build/bin/vtkWrapJavaScript.js \
 @/home/jmh/github/VTKCMake/build/library/VTK-prefix/src/VTK-build/CMakeFiles/vtkIOExodus.js/vtkIOExodus.js.Release.args \
 -o \
 /home/jmh/github/VTKCMake/build/library/VTK-prefix/src/VTK-build/CMakeFiles/vtkIOExodus.js/vtkModelMetadataEmbinding.cxx \
 /home/jmh/github/vtk/IO/Exodus/vtkModelMetadata.h
*/
#include "vtkEmbindSmartPointerTrait.h"
#include <emscripten.h>
#include <string>
#include "vtkVariant.h"
#include "vtkObjectBase.h"
#include "vtkIndent.h"
#include "vtkStringArray.h"
#include "vtkModelMetadata.h"

template<> void emscripten::internal::raw_destructor<vtkModelMetadata>(vtkModelMetadata * ptr){ ptr->Delete(); }
EMSCRIPTEN_BINDINGS(vtkModelMetadata_class) {
  emscripten::class_<vtkModelMetadata, emscripten::base<vtkObject>>("vtkModelMetadata")
    .smart_ptr<vtkSmartPointer<vtkModelMetadata>>("vtkSmartPointer<vtkModelMetadata>")
    .constructor(&vtk::MakeVTKSmartPtr<vtkModelMetadata>)
    .class_function("IsTypeOf", emscripten::optional_override([]( const std::string & arg_0) -> int {  return vtkModelMetadata::IsTypeOf( arg_0.c_str());}))
    .function("IsA", emscripten::optional_override([](vtkModelMetadata& self, const std::string & arg_0) -> int {  return self.IsA( arg_0.c_str());}))
    .class_function("SafeDownCast", &vtkModelMetadata::SafeDownCast, emscripten::allow_raw_pointers())
    .function("NewInstance", &vtkModelMetadata::NewInstance, emscripten::allow_raw_pointers())
    .class_function("GetNumberOfGenerationsFromBaseType", emscripten::optional_override([]( const std::string & arg_0) -> int {  return vtkModelMetadata::GetNumberOfGenerationsFromBaseType( arg_0.c_str());}))
    .function("GetNumberOfGenerationsFromBase", emscripten::optional_override([](vtkModelMetadata& self, const std::string & arg_0) -> int {  return self.GetNumberOfGenerationsFromBase( arg_0.c_str());}))
    .function("PrintGlobalInformation", &vtkModelMetadata::PrintGlobalInformation)
    .function("PrintLocalInformation", &vtkModelMetadata::PrintLocalInformation)
    .function("SetTitle", emscripten::optional_override([](vtkModelMetadata& self, const std::string & arg_0) -> void {  return self.SetTitle( arg_0.c_str());}))
    .function("GetTitle", emscripten::optional_override([](vtkModelMetadata& self) -> std::string {  return self.GetTitle();}))
    .function("GetNumberOfInformationLines", &vtkModelMetadata::GetNumberOfInformationLines)
    .function("SetTimeStepIndex", &vtkModelMetadata::SetTimeStepIndex)
    .function("GetTimeStepIndex", &vtkModelMetadata::GetTimeStepIndex)
    .function("SetTimeSteps", emscripten::optional_override([](vtkModelMetadata& self, int arg_0, std::uintptr_t arg_1) -> void {  return self.SetTimeSteps( arg_0,reinterpret_cast<float*>(arg_1 * sizeof(float)));}))
    .function("GetNumberOfTimeSteps", &vtkModelMetadata::GetNumberOfTimeSteps)
    .function("GetTimeStepValues", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetTimeStepValues()) / sizeof(float);}))
    .function("GetDimension", &vtkModelMetadata::GetDimension)
    .function("SetNumberOfBlocks", &vtkModelMetadata::SetNumberOfBlocks)
    .function("GetNumberOfBlocks", &vtkModelMetadata::GetNumberOfBlocks)
    .function("SetBlockIds", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetBlockIds(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetBlockIds", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetBlockIds()) / sizeof(int);}))
    .function("SetBlockNumberOfElements", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> int {  return self.SetBlockNumberOfElements(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetBlockNumberOfElements", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetBlockNumberOfElements()) / sizeof(int);}))
    .function("SetBlockNodesPerElement", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetBlockNodesPerElement(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetBlockNodesPerElement", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetBlockNodesPerElement()) / sizeof(int);}))
    .function("SetBlockElementIdList", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetBlockElementIdList(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetBlockElementIdList", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetBlockElementIdList()) / sizeof(int);}))
    .function("GetSumElementsPerBlock", &vtkModelMetadata::GetSumElementsPerBlock)
    .function("GetBlockElementIdListIndex", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetBlockElementIdListIndex()) / sizeof(int);}))
    .function("SetBlockNumberOfAttributesPerElement", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> int {  return self.SetBlockNumberOfAttributesPerElement(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetBlockNumberOfAttributesPerElement", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetBlockNumberOfAttributesPerElement()) / sizeof(int);}))
    .function("SetBlockAttributes", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetBlockAttributes(reinterpret_cast<float*>(arg_0 * sizeof(float)));}))
    .function("GetBlockAttributes", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetBlockAttributes()) / sizeof(float);}))
    .function("GetSizeBlockAttributeArray", &vtkModelMetadata::GetSizeBlockAttributeArray)
    .function("GetBlockAttributesIndex", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetBlockAttributesIndex()) / sizeof(int);}))
    .function("SetNumberOfNodeSets", &vtkModelMetadata::SetNumberOfNodeSets)
    .function("GetNumberOfNodeSets", &vtkModelMetadata::GetNumberOfNodeSets)
    .function("SetNodeSetNames", &vtkModelMetadata::SetNodeSetNames, emscripten::allow_raw_pointers())
    .function("GetNodeSetNames", &vtkModelMetadata::GetNodeSetNames, emscripten::allow_raw_pointers())
    .function("SetNodeSetIds", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetNodeSetIds(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetNodeSetIds", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetNodeSetIds()) / sizeof(int);}))
    .function("SetNodeSetSize", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetNodeSetSize(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetNodeSetSize", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetNodeSetSize()) / sizeof(int);}))
    .function("SetNodeSetNodeIdList", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetNodeSetNodeIdList(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetNodeSetNodeIdList", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetNodeSetNodeIdList()) / sizeof(int);}))
    .function("SetNodeSetNumberOfDistributionFactors", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetNodeSetNumberOfDistributionFactors(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetNodeSetNumberOfDistributionFactors", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetNodeSetNumberOfDistributionFactors()) / sizeof(int);}))
    .function("SetNodeSetDistributionFactors", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetNodeSetDistributionFactors(reinterpret_cast<float*>(arg_0 * sizeof(float)));}))
    .function("GetNodeSetDistributionFactors", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetNodeSetDistributionFactors()) / sizeof(float);}))
    .function("SetSumNodesPerNodeSet", &vtkModelMetadata::SetSumNodesPerNodeSet)
    .function("GetSumNodesPerNodeSet", &vtkModelMetadata::GetSumNodesPerNodeSet)
    .function("GetSumDistFactPerNodeSet", &vtkModelMetadata::GetSumDistFactPerNodeSet)
    .function("GetNodeSetNodeIdListIndex", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetNodeSetNodeIdListIndex()) / sizeof(int);}))
    .function("GetNodeSetDistributionFactorIndex", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetNodeSetDistributionFactorIndex()) / sizeof(int);}))
    .function("SetNumberOfSideSets", &vtkModelMetadata::SetNumberOfSideSets)
    .function("GetNumberOfSideSets", &vtkModelMetadata::GetNumberOfSideSets)
    .function("SetSideSetNames", &vtkModelMetadata::SetSideSetNames, emscripten::allow_raw_pointers())
    .function("GetSideSetNames", &vtkModelMetadata::GetSideSetNames, emscripten::allow_raw_pointers())
    .function("SetSideSetIds", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetSideSetIds(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetSideSetIds", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetSideSetIds()) / sizeof(int);}))
    .function("SetSideSetSize", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> int {  return self.SetSideSetSize(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetSideSetSize", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetSideSetSize()) / sizeof(int);}))
    .function("SetSideSetNumberOfDistributionFactors", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> int {  return self.SetSideSetNumberOfDistributionFactors(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetSideSetNumberOfDistributionFactors", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetSideSetNumberOfDistributionFactors()) / sizeof(int);}))
    .function("SetSideSetElementList", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetSideSetElementList(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetSideSetElementList", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetSideSetElementList()) / sizeof(int);}))
    .function("SetSideSetSideList", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetSideSetSideList(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetSideSetSideList", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetSideSetSideList()) / sizeof(int);}))
    .function("SetSideSetNumDFPerSide", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetSideSetNumDFPerSide(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetSideSetNumDFPerSide", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetSideSetNumDFPerSide()) / sizeof(int);}))
    .function("SetSideSetDistributionFactors", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetSideSetDistributionFactors(reinterpret_cast<float*>(arg_0 * sizeof(float)));}))
    .function("GetSideSetDistributionFactors", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetSideSetDistributionFactors()) / sizeof(float);}))
    .function("SetSumSidesPerSideSet", &vtkModelMetadata::SetSumSidesPerSideSet)
    .function("GetSumSidesPerSideSet", &vtkModelMetadata::GetSumSidesPerSideSet)
    .function("GetSumDistFactPerSideSet", &vtkModelMetadata::GetSumDistFactPerSideSet)
    .function("GetSideSetListIndex", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetSideSetListIndex()) / sizeof(int);}))
    .function("GetSideSetDistributionFactorIndex", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetSideSetDistributionFactorIndex()) / sizeof(int);}))
    .function("GetNumberOfBlockProperties", &vtkModelMetadata::GetNumberOfBlockProperties)
    .function("SetBlockPropertyValue", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetBlockPropertyValue(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetBlockPropertyValue", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetBlockPropertyValue()) / sizeof(int);}))
    .function("GetNumberOfNodeSetProperties", &vtkModelMetadata::GetNumberOfNodeSetProperties)
    .function("SetNodeSetPropertyValue", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetNodeSetPropertyValue(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetNodeSetPropertyValue", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetNodeSetPropertyValue()) / sizeof(int);}))
    .function("GetNumberOfSideSetProperties", &vtkModelMetadata::GetNumberOfSideSetProperties)
    .function("SetSideSetPropertyValue", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetSideSetPropertyValue(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetSideSetPropertyValue", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetSideSetPropertyValue()) / sizeof(int);}))
    .function("GetNumberOfGlobalVariables", &vtkModelMetadata::GetNumberOfGlobalVariables)
    .function("SetGlobalVariableValue", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetGlobalVariableValue(reinterpret_cast<float*>(arg_0 * sizeof(float)));}))
    .function("GetGlobalVariableValue", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetGlobalVariableValue()) / sizeof(float);}))
    .function("SetElementVariableTruthTable", emscripten::optional_override([](vtkModelMetadata& self, std::uintptr_t arg_0) -> void {  return self.SetElementVariableTruthTable(reinterpret_cast<int*>(arg_0 * sizeof(int)));}))
    .function("GetElementVariableTruthTable", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetElementVariableTruthTable()) / sizeof(int);}))
    .function("SetAllVariablesDefinedInAllBlocks", &vtkModelMetadata::SetAllVariablesDefinedInAllBlocks)
    .function("AllVariablesDefinedInAllBlocksOn", &vtkModelMetadata::AllVariablesDefinedInAllBlocksOn)
    .function("AllVariablesDefinedInAllBlocksOff", &vtkModelMetadata::AllVariablesDefinedInAllBlocksOff)
    .function("GetAllVariablesDefinedInAllBlocks", &vtkModelMetadata::GetAllVariablesDefinedInAllBlocks)
    .function("GetOriginalNumberOfElementVariables", &vtkModelMetadata::GetOriginalNumberOfElementVariables)
    .function("GetNumberOfElementVariables", &vtkModelMetadata::GetNumberOfElementVariables)
    .function("GetElementVariableNumberOfComponents", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetElementVariableNumberOfComponents()) / sizeof(int);}))
    .function("GetMapToOriginalElementVariableNames", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetMapToOriginalElementVariableNames()) / sizeof(int);}))
    .function("GetOriginalNumberOfNodeVariables", &vtkModelMetadata::GetOriginalNumberOfNodeVariables)
    .function("GetNumberOfNodeVariables", &vtkModelMetadata::GetNumberOfNodeVariables)
    .function("GetNodeVariableNumberOfComponents", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetNodeVariableNumberOfComponents()) / sizeof(int);}))
    .function("GetMapToOriginalNodeVariableNames", emscripten::optional_override([](vtkModelMetadata& self) -> std::uintptr_t {  return reinterpret_cast<std::uintptr_t>(self.GetMapToOriginalNodeVariableNames()) / sizeof(int);}))
    .function("FreeAllGlobalData", &vtkModelMetadata::FreeAllGlobalData)
    .function("FreeAllLocalData", &vtkModelMetadata::FreeAllLocalData)
    .function("FreeBlockDependentData", &vtkModelMetadata::FreeBlockDependentData)
    .function("FreeOriginalElementVariableNames", &vtkModelMetadata::FreeOriginalElementVariableNames)
    .function("FreeOriginalNodeVariableNames", &vtkModelMetadata::FreeOriginalNodeVariableNames)
    .function("FreeUsedElementVariableNames", &vtkModelMetadata::FreeUsedElementVariableNames)
    .function("FreeUsedNodeVariableNames", &vtkModelMetadata::FreeUsedNodeVariableNames)
    .function("FreeUsedElementVariables", &vtkModelMetadata::FreeUsedElementVariables)
    .function("FreeUsedNodeVariables", &vtkModelMetadata::FreeUsedNodeVariables)
    .function("Reset", &vtkModelMetadata::Reset);
}
